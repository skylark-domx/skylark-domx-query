{"version":3,"sources":["skylark-domx-query.js"],"names":["define","skylark","langx","noder","finder","isQ","some","Array","prototype","push","slice","every","concat","filter","map","forEach","indexOf","sort","rquickExpr","funcArg","isArrayLike","isString","uniq","isFunction","type","isObject","isArray","isWindow","isDocument","isPlainObject","compact","flatten","camelCase","dasherize","children","wrapper_node_operation","func","context","oldValueFunc","html","argType","nodes","arguments","arg","createFragment","length","this","each","idx","apply","wrapper_map","params","call","result","elem","query","wrapper_selector","last","selector","wrapper_selector_until","util","wrapper_every_act","node","$","NodeList","klass","klassName","init","match","props","doc","charAt","exec","byId","ownerDoc","find","descendants","window","name","attr","object","ready","fn","mixin","el","i","get","undefined","toArray","size","remove","callback","not","element","matches","add","is","inArray","isHtmlNode","excludes","item","has","contains","eq","first","closest","parents","ancestors","parentsUntil","parent","contents","empty","pluck","property","pushStack","elms","ret","prevObject","replaceWith","newContent","before","wrap","structure","dom","clone","parentNode","index","wrapAll","cloneNode","wrappingElement","append","wrapInner","self","unwrap","document","createTextNode","childNodes","textContent","toggle","setting","css","show","hide","prev","prevAll","previousSiblings","next","nextAll","nextSiblings","siblings","detach","hover","fnOver","fnOut","mouseenter","mouseleave","traverse","after","prepend","appendTo","prependTo","insertBefore","insertAfter","replaceAll","original","elems","insert","scrollParent","includeHidden","position","excludeStaticParent","overflowRegex","test","ownerDocument","end","andSelf","addBack","split","eventType","place","refNode","descendant","replace","addContent","content","template","substitute","disableSelection","createElement","on","event","preventDefault","enableSelection","off","reflow","flow","isBlockNode","plugin","options","args","returnValue","plugins","instantiate","wraps","wrapper_value","value","isDefined","newValue","wrapper_some_chk","wrapper_every_act_firstArgFunc","arg1","wrapper_name_value","attach","main"],"mappings":"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","file":"../skylark-domx-query.js","sourcesContent":["define('skylark-domx-query/query',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\"\r\n], function(skylark, langx, noder, finder) {\r\n    var some = Array.prototype.some,\r\n        push = Array.prototype.push,\r\n        every = Array.prototype.every,\r\n        concat = Array.prototype.concat,\r\n        slice = Array.prototype.slice,\r\n        map = Array.prototype.map,\r\n        filter = Array.prototype.filter,\r\n        forEach = Array.prototype.forEach,\r\n        indexOf = Array.prototype.indexOf,\r\n        sort = Array.prototype.sort,\r\n        isQ;\r\n\r\n    var rquickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\r\n\r\n    var funcArg = langx.funcArg,\r\n        isArrayLike = langx.isArrayLike,\r\n        isString = langx.isString,\r\n        uniq = langx.uniq,\r\n        isFunction = langx.isFunction;\r\n\r\n    var type = langx.type,\r\n        isArray = langx.isArray,\r\n\r\n        isWindow = langx.isWindow,\r\n\r\n        isDocument = langx.isDocument,\r\n\r\n        isObject = langx.isObject,\r\n\r\n        isPlainObject = langx.isPlainObject,\r\n\r\n        compact = langx.compact,\r\n\r\n        flatten = langx.flatten,\r\n\r\n        camelCase = langx.camelCase,\r\n\r\n        dasherize = langx.dasherize,\r\n        children = finder.children;\r\n\r\n    function wrapper_node_operation(func, context, oldValueFunc) {\r\n        return function(html) {\r\n            var argType, nodes = langx.map(arguments, function(arg) {\r\n                argType = type(arg)\r\n                return argType == \"function\" || argType == \"object\" || argType == \"array\" || arg == null ?\r\n                    arg : noder.createFragment(arg)\r\n            });\r\n            if (nodes.length < 1) {\r\n                return this\r\n            }\r\n            this.each(function(idx) {\r\n                func.apply(context, [this, nodes, idx > 0]);\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function wrapper_map(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            var result = langx.map(self, function(elem, idx) {\r\n                return func.apply(context, [elem].concat(params));\r\n            });\r\n            return query(uniq(result));\r\n        }\r\n    }\r\n\r\n    function wrapper_selector(func, context, last) {\r\n        return function(selector) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            var result = this.map(function(idx, elem) {\r\n                // if (elem.nodeType == 1) {\r\n                //if (elem.querySelector) {\r\n                    return func.apply(context, last ? [elem] : [elem, selector]);\r\n                //}\r\n            });\r\n            if (last && selector) {\r\n                return result.filter(selector);\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    function wrapper_selector_until(func, context, last) {\r\n        return function(util, selector) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            //if (selector === undefined) { //TODO : needs confirm?\r\n            //    selector = util;\r\n            //    util = undefined;\r\n            //}\r\n            var result = this.map(function(idx, elem) {\r\n                // if (elem.nodeType == 1) { // TODO\r\n                //if (elem.querySelector) {\r\n                    return func.apply(context, last ? [elem, util] : [elem, selector, util]);\r\n                //}\r\n            });\r\n            if (last && selector) {\r\n                return result.filter(selector);\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function wrapper_every_act(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            this.each(function(idx,node) {\r\n                func.apply(context, [this].concat(params));\r\n            });\r\n            return self;\r\n        }\r\n    }\r\n\r\n    function wrapper_every_act_firstArgFunc(func, context, oldValueFunc) {\r\n        return function(arg1) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            forEach.call(self, function(elem, idx) {\r\n                var newArg1 = funcArg(elem, arg1, idx, oldValueFunc(elem));\r\n                func.apply(context, [elem, arg1].concat(params.slice(1)));\r\n            });\r\n            return self;\r\n        }\r\n    }\r\n\r\n    function wrapper_some_chk(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            return some.call(self, function(elem) {\r\n                return func.apply(context, [elem].concat(params));\r\n            });\r\n        }\r\n    }\r\n\r\n    function wrapper_name_value(func, context, oldValueFunc) {\r\n        return function(name, value) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n\r\n            if (langx.isPlainObject(name) || langx.isDefined(value)) {\r\n                forEach.call(self, function(elem, idx) {\r\n                    var newValue;\r\n                    if (oldValueFunc) {\r\n                        newValue = funcArg(elem, value, idx, oldValueFunc(elem, name));\r\n                    } else {\r\n                        newValue = value\r\n                    }\r\n                    func.apply(context, [elem].concat(params));\r\n                });\r\n                return self;\r\n            } else {\r\n                if (self[0]) {\r\n                    return func.apply(context, [self[0], name]);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function wrapper_value(func, context, oldValueFunc) {\r\n        return function(value) {\r\n            var self = this;\r\n\r\n            if (langx.isDefined(value)) {\r\n                forEach.call(self, function(elem, idx) {\r\n                    var newValue;\r\n                    if (oldValueFunc) {\r\n                        newValue = funcArg(elem, value, idx, oldValueFunc(elem));\r\n                    } else {\r\n                        newValue = value\r\n                    }\r\n                    func.apply(context, [elem, newValue]);\r\n                });\r\n                return self;\r\n            } else {\r\n                if (self[0]) {\r\n                    return func.apply(context, [self[0]]);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    var NodeList = langx.klass({\r\n        klassName: \"SkNodeList\",\r\n        init: function(selector, context) {\r\n            var self = this,\r\n                match, nodes, node, props;\r\n\r\n            if (selector) {\r\n                self.context = context = context || noder.doc();\r\n\r\n                if (isString(selector)) {\r\n                    // a html string or a css selector is expected\r\n                    self.selector = selector;\r\n\r\n                    if (selector.charAt(0) === \"<\" && selector.charAt(selector.length - 1) === \">\" && selector.length >= 3) {\r\n                        match = [null, selector, null];\r\n                    } else {\r\n                        match = rquickExpr.exec(selector);\r\n                    }\r\n\r\n                    if (match) {\r\n                        if (match[1]) {\r\n                            // if selector is html\r\n                            nodes = noder.createFragment(selector);\r\n\r\n                            if (langx.isPlainObject(context)) {\r\n                                props = context;\r\n                            }\r\n\r\n                        } else {\r\n                            node = finder.byId(match[2], noder.ownerDoc(context));\r\n\r\n                            if (node) {\r\n                                // if selector is id\r\n                                nodes = [node];\r\n                            }\r\n\r\n                        }\r\n                    } else {\r\n                        // if selector is css selector\r\n                        if (langx.isString(context)) {\r\n                            context = finder.find(context);\r\n                        }\r\n\r\n                        nodes = finder.descendants(context, selector);\r\n                    }\r\n                } else {\r\n                    if (selector !== window && isArrayLike(selector)) {\r\n                        // a dom node array is expected\r\n                        nodes = selector;\r\n                    } else {\r\n                        // a dom node is expected\r\n                        nodes = [selector];\r\n                    }\r\n                    //self.add(selector, false);\r\n                }\r\n            }\r\n\r\n\r\n            if (nodes) {\r\n\r\n                push.apply(self, nodes);\r\n\r\n                if (props) {\r\n                    for ( var name  in props ) {\r\n                        // Properties of context are called as methods if possible\r\n                        if ( langx.isFunction( this[ name ] ) ) {\r\n                            this[ name ]( props[ name ] );\r\n                        } else {\r\n                            this.attr( name, props[ name ] );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return self;\r\n        }\r\n    });\r\n\r\n    var query = (function() {\r\n        isQ = function(object) {\r\n            return object instanceof NodeList;\r\n        }\r\n        init = function(selector, context) {\r\n            return new NodeList(selector, context);\r\n        }\r\n\r\n        var $ = function(selector, context) {\r\n            if (isFunction(selector)) {\r\n                $.ready(function() {\r\n                    selector($);\r\n                });\r\n            } else if (isQ(selector)) {\r\n                return selector;\r\n            } else {\r\n                if (context && isQ(context) && isString(selector)) {\r\n                    return context.find(selector);\r\n                }\r\n                return init(selector, context);\r\n            }\r\n        };\r\n\r\n        $.fn = NodeList.prototype;\r\n        langx.mixin($.fn, {\r\n            // `map` and `slice` in the jQuery API work differently\r\n            // from their array counterparts\r\n            length : 0,\r\n\r\n            map: function(fn) {\r\n                return $(uniq(langx.map(this, function(el, i) {\r\n                    return fn.call(el, i, el)\r\n                })));\r\n            },\r\n\r\n            slice: function() {\r\n                return $(slice.apply(this, arguments))\r\n            },\r\n\r\n            forEach: function() {\r\n                return forEach.apply(this,arguments);\r\n            },\r\n\r\n            get: function(idx) {\r\n                return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]\r\n            },\r\n\r\n            indexOf: function() {\r\n                return indexOf.apply(this,arguments);\r\n            },\r\n\r\n            sort : function() {\r\n                return sort.apply(this,arguments);\r\n            },\r\n\r\n            toArray: function() {\r\n                return slice.call(this);\r\n            },\r\n\r\n            size: function() {\r\n                return this.length\r\n            },\r\n\r\n            //remove: wrapper_every_act(noder.remove, noder),\r\n            remove : function(selector) {\r\n                if (selector) {\r\n                    return this.find(selector).remove();\r\n                }\r\n                this.each(function(i,node){\r\n                    noder.remove(node);\r\n                });\r\n                return this;\r\n            },\r\n\r\n            each: function(callback) {\r\n                langx.each(this, callback);\r\n                return this;\r\n            },\r\n\r\n            filter: function(selector) {\r\n                if (isFunction(selector)) return this.not(this.not(selector))\r\n                return $(filter.call(this, function(element) {\r\n                    return finder.matches(element, selector)\r\n                }))\r\n            },\r\n\r\n            add: function(selector, context) {\r\n                return $(uniq(this.toArray().concat($(selector, context).toArray())));\r\n            },\r\n\r\n            is: function(selector) {\r\n                if (this.length > 0) {\r\n                    var self = this;\r\n                    if (langx.isString(selector)) {\r\n                        return some.call(self,function(elem) {\r\n                            return finder.matches(elem, selector);\r\n                        });\r\n                    } else if (langx.isArrayLike(selector)) {\r\n                       return some.call(self,function(elem) {\r\n                            return langx.inArray(elem, selector) > -1;\r\n                        });\r\n                    } else if (langx.isHtmlNode(selector)) {\r\n                       return some.call(self,function(elem) {\r\n                            return elem ==  selector;\r\n                        });\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            \r\n            not: function(selector) {\r\n                var nodes = []\r\n                if (isFunction(selector) && selector.call !== undefined)\r\n                    this.each(function(idx,node) {\r\n                        if (!selector.call(this, idx,node)) nodes.push(this)\r\n                    })\r\n                else {\r\n                    var excludes = typeof selector == 'string' ? this.filter(selector) :\r\n                        (isArrayLike(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)\r\n                    this.forEach(function(el) {\r\n                        if (excludes.indexOf(el) < 0) nodes.push(el)\r\n                    })\r\n                }\r\n                return $(nodes)\r\n            },\r\n\r\n            has: function(selector) {\r\n                return this.filter(function() {\r\n                    return isObject(selector) ?\r\n                        noder.contains(this, selector) :\r\n                        $(this).find(selector).size()\r\n                })\r\n            },\r\n\r\n            eq: function(idx) {\r\n                return idx === -1 ? this.slice(idx) : this.slice(idx, +idx + 1);\r\n            },\r\n\r\n            first: function() {\r\n                return this.eq(0);\r\n            },\r\n\r\n            last: function() {\r\n                return this.eq(-1);\r\n            },\r\n\r\n            find: wrapper_selector(finder.descendants, finder),\r\n\r\n            closest: wrapper_selector(finder.closest, finder),\r\n            /*\r\n                        closest: function(selector, context) {\r\n                            var node = this[0],\r\n                                collection = false\r\n                            if (typeof selector == 'object') collection = $(selector)\r\n                            while (node && !(collection ? collection.indexOf(node) >= 0 : finder.matches(node, selector)))\r\n                                node = node !== context && !isDocument(node) && node.parentNode\r\n                            return $(node)\r\n                        },\r\n            */\r\n\r\n\r\n            parents: wrapper_selector(finder.ancestors, finder),\r\n\r\n            parentsUntil: wrapper_selector_until(finder.ancestors, finder),\r\n\r\n\r\n            parent: wrapper_selector(finder.parent, finder),\r\n\r\n            children: wrapper_selector(finder.children, finder),\r\n\r\n            contents: wrapper_map(noder.contents, noder),\r\n\r\n            empty: wrapper_every_act(noder.empty, noder),\r\n\r\n            html: wrapper_every_act(noder.html, noder),\r\n\r\n            // `pluck` is borrowed from Prototype.js\r\n            pluck: function(property) {\r\n                return langx.map(this, function(el) {\r\n                    return el[property]\r\n                })\r\n            },\r\n\r\n            pushStack : function(elms) {\r\n                var ret = $(elms);\r\n                ret.prevObject = this;\r\n                return ret;\r\n            },\r\n            \r\n            replaceWith: function(newContent) {\r\n                return this.before(newContent).remove();\r\n            },\r\n\r\n            wrap: function(structure) {\r\n                var func = isFunction(structure)\r\n                if (this[0] && !func)\r\n                    var dom = $(structure).get(0),\r\n                        clone = dom.parentNode || this.length > 1\r\n\r\n                return this.each(function(index,node) {\r\n                    $(this).wrapAll(\r\n                        func ? structure.call(this, index,node) :\r\n                        clone ? dom.cloneNode(true) : dom\r\n                    )\r\n                })\r\n            },\r\n\r\n            wrapAll: function(wrappingElement) {\r\n                if (this[0]) {\r\n                    $(this[0]).before(wrappingElement = $(wrappingElement));\r\n                    var children;\r\n                    // drill down to the inmost element\r\n                    while ((children = wrappingElement.children()).length) {\r\n                        wrappingElement = children.first();\r\n                    }\r\n                    $(wrappingElement).append(this);\r\n                }\r\n                return this\r\n            },\r\n\r\n            wrapInner: function(wrappingElement) {\r\n                var func = isFunction(wrappingElement)\r\n                return this.each(function(index,node) {\r\n                    var self = $(this),\r\n                        contents = self.contents(),\r\n                        dom = func ? wrappingElement.call(this, index,node) : wrappingElement\r\n                    contents.length ? contents.wrapAll(dom) : self.append(dom)\r\n                })\r\n            },\r\n\r\n            unwrap: function(selector) {\r\n                if (this.parent().children().length === 0) {\r\n                    // remove dom without text\r\n                    this.parent(selector).not(\"body\").each(function() {\r\n                        $(this).replaceWith(document.createTextNode(this.childNodes[0].textContent));\r\n                    });\r\n                } else {\r\n                    this.parent().each(function() {\r\n                        $(this).replaceWith($(this).children())\r\n                    });\r\n                }\r\n                return this\r\n            },\r\n\r\n            clone: function() {\r\n                return this.map(function() {\r\n                    return this.cloneNode(true)\r\n                })\r\n            },\r\n\r\n\r\n            toggle: function(setting) {\r\n                return this.each(function() {\r\n                    var el = $(this);\r\n                    (setting === undefined ? el.css(\"display\") == \"none\" : setting) ? el.show(): el.hide()\r\n                })\r\n            },\r\n\r\n            prev: function(selector) {\r\n                return $(this.pluck('previousElementSibling')).filter(selector || '*')\r\n            },\r\n\r\n            prevAll: wrapper_selector(finder.previousSiblings, finder),\r\n\r\n            next: function(selector) {\r\n                return $(this.pluck('nextElementSibling')).filter(selector || '*')\r\n            },\r\n\r\n            nextAll: wrapper_selector(finder.nextSiblings, finder),\r\n\r\n            siblings: wrapper_selector(finder.siblings, finder),\r\n\r\n            index: function(elem) {\r\n                if (elem) {\r\n                    return this.indexOf($(elem)[0]);\r\n                } else {\r\n                    return this.parent().children().indexOf(this[0]);\r\n                }\r\n            }\r\n        });\r\n\r\n        // for now\r\n        $.fn.detach = $.fn.remove;\r\n\r\n        $.fn.hover = function(fnOver, fnOut) {\r\n            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\r\n        };\r\n\r\n\r\n        var traverseNode = noder.traverse;\r\n\r\n\r\n        $.fn.after = wrapper_node_operation(noder.after, noder);\r\n\r\n        $.fn.prepend = wrapper_node_operation(noder.prepend, noder);\r\n\r\n        $.fn.before = wrapper_node_operation(noder.before, noder);\r\n\r\n        $.fn.append = wrapper_node_operation(noder.append, noder);\r\n\r\n\r\n        langx.each( {\r\n            appendTo: \"append\",\r\n            prependTo: \"prepend\",\r\n            insertBefore: \"before\",\r\n            insertAfter: \"after\",\r\n            replaceAll: \"replaceWith\"\r\n        }, function( name, original ) {\r\n            $.fn[ name ] = function( selector ) {\r\n                var elems,\r\n                    ret = [],\r\n                    insert = $( selector ),\r\n                    last = insert.length - 1,\r\n                    i = 0;\r\n\r\n                for ( ; i <= last; i++ ) {\r\n                    elems = i === last ? this : this.clone( true );\r\n                    $( insert[ i ] )[ original ]( elems );\r\n\r\n                    // Support: Android <=4.0 only, PhantomJS 1 only\r\n                    // .get() because push.apply(_, arraylike) throws on ancient WebKit\r\n                    push.apply( ret, elems.get() );\r\n                }\r\n\r\n                return this.pushStack( ret );\r\n            };\r\n        } );\r\n\r\n/*\r\n        $.fn.insertAfter = function(html) {\r\n            $(html).after(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.insertBefore = function(html) {\r\n            $(html).before(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.appendTo = function(html) {\r\n            $(html).append(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.prependTo = function(html) {\r\n            $(html).prepend(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.replaceAll = function(selector) {\r\n            $(selector).replaceWith(this);\r\n            return this;\r\n        };\r\n*/\r\n        return $;\r\n    })();\r\n\r\n    (function($) {\r\n        $.fn.scrollParent = function( includeHidden ) {\r\n            var position = this.css( \"position\" ),\r\n                excludeStaticParent = position === \"absolute\",\r\n                overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\r\n                scrollParent = this.parents().filter( function() {\r\n                    var parent = $( this );\r\n                    if ( excludeStaticParent && parent.css( \"position\" ) === \"static\" ) {\r\n                        return false;\r\n                    }\r\n                    return overflowRegex.test( parent.css( \"overflow\" ) + parent.css( \"overflow-y\" ) +\r\n                        parent.css( \"overflow-x\" ) );\r\n                } ).eq( 0 );\r\n\r\n            return position === \"fixed\" || !scrollParent.length ?\r\n                $( this[ 0 ].ownerDocument || document ) :\r\n                scrollParent;\r\n        };\r\n\r\n    })(query);\r\n\r\n\r\n    (function($) {\r\n        $.fn.end = function() {\r\n            return this.prevObject || $()\r\n        }\r\n\r\n        $.fn.andSelf = function() {\r\n            return this.add(this.prevObject || $())\r\n        }\r\n\r\n        $.fn.addBack = function(selector) {\r\n            if (this.prevObject) {\r\n                if (selector) {\r\n                    return this.add(this.prevObject.filter(selector));\r\n                } else {\r\n                    return this.add(this.prevObject);\r\n                }\r\n            } else {\r\n                return this;\r\n            }\r\n        }\r\n\r\n        'filter,add,not,eq,first,last,find,closest,parents,parent,children,siblings,prev,prevAll,next,nextAll'.split(',').forEach(function(property) {\r\n            var fn = $.fn[property]\r\n            $.fn[property] = function() {\r\n                var ret = fn.apply(this, arguments)\r\n                ret.prevObject = this\r\n                return ret\r\n            }\r\n        })\r\n    })(query);\r\n\r\n\r\n    (function($) {\r\n        $.fn.query = $.fn.find;\r\n\r\n        $.fn.place = function(refNode, position) {\r\n            // summary:\r\n            //      places elements of this node list relative to the first element matched\r\n            //      by queryOrNode. Returns the original NodeList. See: `dojo/dom-construct.place`\r\n            // queryOrNode:\r\n            //      may be a string representing any valid CSS3 selector or a DOM node.\r\n            //      In the selector case, only the first matching element will be used\r\n            //      for relative positioning.\r\n            // position:\r\n            //      can be one of:\r\n            //\r\n            //      -   \"last\" (default)\r\n            //      -   \"first\"\r\n            //      -   \"before\"\r\n            //      -   \"after\"\r\n            //      -   \"only\"\r\n            //      -   \"replace\"\r\n            //\r\n            //      or an offset in the childNodes\r\n            if (langx.isString(refNode)) {\r\n                refNode = finder.descendant(refNode);\r\n            } else if (isQ(refNode)) {\r\n                refNode = refNode[0];\r\n            }\r\n            return this.each(function(i, node) {\r\n                switch (position) {\r\n                    case \"before\":\r\n                        noder.before(refNode, node);\r\n                        break;\r\n                    case \"after\":\r\n                        noder.after(refNode, node);\r\n                        break;\r\n                    case \"replace\":\r\n                        noder.replace(refNode, node);\r\n                        break;\r\n                    case \"only\":\r\n                        noder.empty(refNode);\r\n                        noder.append(refNode, node);\r\n                        break;\r\n                    case \"first\":\r\n                        noder.prepend(refNode, node);\r\n                        break;\r\n                        // else fallthrough...\r\n                    default: // aka: last\r\n                        noder.append(refNode, node);\r\n                }\r\n            });\r\n        };\r\n\r\n        $.fn.addContent = function(content, position) {\r\n            if (content.template) {\r\n                content = langx.substitute(content.template, content);\r\n            }\r\n            return this.append(content);\r\n        };\r\n\r\n\r\n\r\n        $.fn.disableSelection = ( function() {\r\n            var eventType = \"onselectstart\" in document.createElement( \"div\" ) ?\r\n                \"selectstart\" :\r\n                \"mousedown\";\r\n\r\n            return function() {\r\n                return this.on( eventType + \".ui-disableSelection\", function( event ) {\r\n                    event.preventDefault();\r\n                } );\r\n            };\r\n        } )();\r\n\r\n        $.fn.enableSelection = function() {\r\n            return this.off( \".ui-disableSelection\" );\r\n        };\r\n\r\n        $.fn.reflow = function() {\r\n            return noder.flow(this[0]);\r\n        };\r\n\r\n        $.fn.isBlockNode = function() {\r\n            return noder.isBlockNode(this[0]);\r\n        };\r\n       \r\n\r\n    })(query);\r\n\r\n    query.fn.plugin = function(name,options) {\r\n        var args = slice.call( arguments, 1 ),\r\n            self = this,\r\n            returnValue = this;\r\n\r\n        this.each(function(){\r\n            returnValue = plugins.instantiate.apply(self,[this,name].concat(args));\r\n        });\r\n        return returnValue;\r\n    };\r\n\r\n\r\n    query.wraps = {\r\n        wrapper_node_operation,\r\n        wrapper_map,\r\n        wrapper_value,\r\n        wrapper_selector,\r\n        wrapper_some_chk,\r\n        wrapper_selector_until,\r\n        wrapper_every_act_firstArgFunc,\r\n        wrapper_every_act,\r\n        wrapper_name_value\r\n\r\n    };\r\n\r\n    return skylark.attach(\"domx.query\", query);\r\n\r\n});\ndefine('skylark-domx-query/main',[\r\n\t\"./query\"\r\n],function(query){\r\n\treturn query;\r\n});\ndefine('skylark-domx-query', ['skylark-domx-query/main'], function (main) { return main; });\n\n"]}