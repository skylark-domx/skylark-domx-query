{"version":3,"sources":["skylark-domx-query.js"],"names":["define","skylark","langx","noder","finder","isQ","some","Array","prototype","push","slice","every","concat","filter","map","forEach","indexOf","sort","rquickExpr","funcArg","isArrayLike","isString","uniq","isFunction","type","isObject","isArray","isWindow","isDocument","isPlainObject","compact","flatten","camelCase","dasherize","children","wrapper_node_operation","func","context","oldValueFunc","html","argType","nodes","arguments","arg","createFragment","length","this","each","idx","apply","wrapper_map","mapValue","params","call","result","elem","query","wrapper_selector","last","selector","querySelector","wrapper_selector_until","util","wrapper_every_act","node","wrapper_value","value","isDefined","newValue","$","NodeList","klass","klassName","init","match","props","doc","charAt","exec","byId","ownerDoc","find","descendants","name","attr","object","ready","rootQuery","document","fn","mixin","el","i","get","undefined","toArray","size","remove","callback","not","element","matches","add","is","inArray","isHtmlNode","excludes","item","has","contains","eq","first","closest","parents","ancestors","parentsUntil","parent","contents","empty","pluck","property","pushStack","elms","ret","prevObject","replaceWith","newContent","before","wrap","htmlIsFunction","wrapAll","ownerDocument","clone","parentNode","insertBefore","firstElementChild","append","wrapInner","self","unwrap","childNodes","cloneNode","toggle","setting","css","show","hide","prev","prevAll","previousSiblings","next","nextAll","nextSiblings","siblings","index","detach","hover","fnOver","fnOut","mouseenter","mouseleave","traverse","after","prepend","appendTo","prependTo","insertAfter","replaceAll","original","elems","insert","scrollParent","includeHidden","position","excludeStaticParent","overflowRegex","test","end","andSelf","addBack","split","eventType","place","refNode","descendant","replace","addContent","content","template","substitute","disableSelection","createElement","on","event","preventDefault","enableSelection","off","reflow","isBlockNode","plugin","options","args","returnValue","plugins","instantiate","wraps","wrapper_some_chk","wrapper_every_act_firstArgFunc","arg1","newArg1","wrapper_name_value","attach","styler","disabled","style","hasClass","addClass","className","removeClass","toggleClass","replaceClass","newClass","oldClass","main"],"mappings":"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","file":"../skylark-domx-query.js","sourcesContent":["define('skylark-domx-query/query',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\"\r\n], function(skylark, langx, noder, finder) {\r\n    var some = Array.prototype.some,\r\n        push = Array.prototype.push,\r\n        every = Array.prototype.every,\r\n        concat = Array.prototype.concat,\r\n        slice = Array.prototype.slice,\r\n        map = Array.prototype.map,\r\n        filter = Array.prototype.filter,\r\n        forEach = Array.prototype.forEach,\r\n        indexOf = Array.prototype.indexOf,\r\n        sort = Array.prototype.sort,\r\n        isQ;\r\n\r\n    var rquickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\r\n\r\n    var funcArg = langx.funcArg,\r\n        isArrayLike = langx.isArrayLike,\r\n        isString = langx.isString,\r\n        uniq = langx.uniq,\r\n        isFunction = langx.isFunction;\r\n\r\n    var type = langx.type,\r\n        isArray = langx.isArray,\r\n\r\n        isWindow = langx.isWindow,\r\n\r\n        isDocument = langx.isDocument,\r\n\r\n        isObject = langx.isObject,\r\n\r\n        isPlainObject = langx.isPlainObject,\r\n\r\n        compact = langx.compact,\r\n\r\n        flatten = langx.flatten,\r\n\r\n        camelCase = langx.camelCase,\r\n\r\n        dasherize = langx.dasherize,\r\n        children = finder.children;\r\n\r\n    function wrapper_node_operation(func, context, oldValueFunc) {\r\n        return function(html) {\r\n            var argType, nodes = langx.map(arguments, function(arg) {\r\n                argType = type(arg)\r\n                return argType == \"function\" || argType == \"object\" || argType == \"array\" || arg == null ?\r\n                    arg : noder.createFragment(arg)\r\n            });\r\n            if (nodes.length < 1) {\r\n                return this\r\n            }\r\n            this.each(function(idx) {\r\n                func.apply(context, [this, nodes, idx > 0]);\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function wrapper_map(func, context,mapValue) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            var result = langx.map(self, function(elem, idx) {\r\n                return func.apply(context, [elem].concat(params));\r\n            });\r\n            if (mapValue) {\r\n                return result;\r\n            } else {\r\n                    return query(uniq(result));\r\n            }\r\n        }\r\n    }\r\n\r\n    function wrapper_selector(func, context, last) {\r\n        return function(selector) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            var result = this.map(function(idx, elem) {\r\n                // if (elem.nodeType == 1) {\r\n                if (elem.querySelector) {\r\n                    return func.apply(context, last ? [elem] : [elem, selector]);\r\n                } else {\r\n                    return [];\r\n                }\r\n            });\r\n            if (last && selector) {\r\n                return result.filter(selector);\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    function wrapper_selector_until(func, context, last) {\r\n        return function(util, selector) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            //if (selector === undefined) { //TODO : needs confirm?\r\n            //    selector = util;\r\n            //    util = undefined;\r\n            //}\r\n            var result = this.map(function(idx, elem) {\r\n                // if (elem.nodeType == 1) { // TODO\r\n                //if (elem.querySelector) {\r\n                    return func.apply(context, last ? [elem, util] : [elem, selector, util]);\r\n                //} else {\r\n                //    return [];\r\n                //}\r\n            });\r\n            if (last && selector) {\r\n                return result.filter(selector);\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function wrapper_every_act(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            this.each(function(idx,node) {\r\n                func.apply(context, [this].concat(params));\r\n            });\r\n            return self;\r\n        }\r\n    }\r\n\r\n    function wrapper_every_act_firstArgFunc(func, context, oldValueFunc) {\r\n        return function(arg1) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            forEach.call(self, function(elem, idx) {\r\n                var newArg1 = funcArg(elem, arg1, idx, oldValueFunc(elem));\r\n                func.apply(context, [elem, newArg1].concat(params.slice(1)));\r\n            });\r\n            return self;\r\n        }\r\n    }\r\n\r\n    function wrapper_some_chk(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            return some.call(self, function(elem) {\r\n                return func.apply(context, [elem].concat(params));\r\n            });\r\n        }\r\n    }\r\n\r\n    function wrapper_name_value(func, context, oldValueFunc) {\r\n        return function(name, value) {\r\n            var self = this;\r\n\r\n            if (langx.isPlainObject(name) || langx.isDefined(value)) {\r\n                forEach.call(self, function(elem, idx) {\r\n                    var newValue;\r\n                    if (oldValueFunc) {\r\n                        newValue = funcArg(elem, value, idx, oldValueFunc(elem, name));\r\n                    } else {\r\n                        newValue = value\r\n                    }\r\n                    func.apply(context, [elem,name,newValue]);\r\n                });\r\n                return self;\r\n            } else {\r\n                if (self[0]) {\r\n                    return func.apply(context, [self[0], name]);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function wrapper_value(func, context, oldValueFunc) {\r\n        return function(value) {\r\n            var self = this;\r\n\r\n            if (langx.isDefined(value)) {\r\n                forEach.call(self, function(elem, idx) {\r\n                    var newValue;\r\n                    if (oldValueFunc) {\r\n                        newValue = funcArg(elem, value, idx, oldValueFunc(elem));\r\n                    } else {\r\n                        newValue = value\r\n                    }\r\n                    func.apply(context, [elem, newValue]);\r\n                });\r\n                return self;\r\n            } else {\r\n                if (self[0]) {\r\n                    return func.apply(context, [self[0]]);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    var NodeList = langx.klass({\r\n        klassName: \"SkNodeList\",\r\n        init: function(selector, context) {\r\n            var self = this,\r\n                match, nodes, node, props;\r\n\r\n            if (selector) {\r\n                self.context = context = context || noder.doc();\r\n\r\n                if (isString(selector)) {\r\n                    // a html string or a css selector is expected\r\n                    self.selector = selector;\r\n\r\n                    if (selector.charAt(0) === \"<\" && selector.charAt(selector.length - 1) === \">\" && selector.length >= 3) {\r\n                        match = [null, selector, null];\r\n                    } else {\r\n                        match = rquickExpr.exec(selector);\r\n                    }\r\n\r\n                    if (match) {\r\n                        if (match[1]) {\r\n                            // if selector is html\r\n                            nodes = noder.createFragment(selector);\r\n\r\n                            if (langx.isPlainObject(context)) {\r\n                                props = context;\r\n                            }\r\n\r\n                        } else {\r\n                            node = finder.byId(match[2], noder.ownerDoc(context));\r\n\r\n                            if (node) {\r\n                                // if selector is id\r\n                                nodes = [node];\r\n                            }\r\n\r\n                        }\r\n                    } else {\r\n                        // if selector is css selector\r\n                        if (langx.isString(context)) {\r\n                            context = finder.find(context);\r\n                        }\r\n\r\n                        nodes = finder.descendants(context, selector);\r\n                    }\r\n                } else {\r\n                    if (!noder.isWindow(selector) && isArrayLike(selector)) {\r\n                        // a dom node array is expected\r\n                        nodes = selector;\r\n                    } else {\r\n                        // a dom node is expected\r\n                        nodes = [selector];\r\n                    }\r\n                    //self.add(selector, false);\r\n                }\r\n            }\r\n\r\n\r\n            if (nodes) {\r\n\r\n                push.apply(self, nodes);\r\n\r\n                if (props) {\r\n                    for ( var name  in props ) {\r\n                        // Properties of context are called as methods if possible\r\n                        if ( langx.isFunction( this[ name ] ) ) {\r\n                            this[ name ]( props[ name ] );\r\n                        } else {\r\n                            this.attr( name, props[ name ] );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return self;\r\n        }\r\n    });\r\n\r\n    var query = (function() {\r\n        isQ = function(object) {\r\n            return object instanceof NodeList;\r\n        }\r\n        init = function(selector, context) {\r\n            return new NodeList(selector, context);\r\n        }\r\n\r\n        var $ = function(selector, context) {\r\n            if (isFunction(selector)) {\r\n                $.ready(function() {\r\n                    selector($);\r\n                });\r\n                return rootQuery;\r\n            } else if (isQ(selector)) {\r\n                return selector;\r\n            } else {\r\n                if (context && isQ(context) && isString(selector)) {\r\n                    return context.find(selector);\r\n                }\r\n                return init(selector, context);\r\n            }\r\n        },rootQuery = $(document);\r\n\r\n        $.fn = NodeList.prototype;\r\n        langx.mixin($.fn, {\r\n            // `map` and `slice` in the jQuery API work differently\r\n            // from their array counterparts\r\n            length : 0,\r\n\r\n            map: function(fn) {\r\n                return $(uniq(langx.map(this, function(el, i) {\r\n                    return fn.call(el, i, el)\r\n                })));\r\n            },\r\n\r\n            slice: function() {\r\n                return $(slice.apply(this, arguments))\r\n            },\r\n\r\n            forEach: function() {\r\n                return forEach.apply(this,arguments);\r\n            },\r\n\r\n            get: function(idx) {\r\n                return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]\r\n            },\r\n\r\n            indexOf: function() {\r\n                return indexOf.apply(this,arguments);\r\n            },\r\n\r\n            sort : function() {\r\n                return sort.apply(this,arguments);\r\n            },\r\n\r\n            toArray: function() {\r\n                return slice.call(this);\r\n            },\r\n\r\n            size: function() {\r\n                return this.length\r\n            },\r\n\r\n            //remove: wrapper_every_act(noder.remove, noder),\r\n            remove : function(selector) {\r\n                if (selector) {\r\n                    return this.find(selector).remove();\r\n                }\r\n                this.each(function(i,node){\r\n                    noder.remove(node);\r\n                });\r\n                return this;\r\n            },\r\n\r\n            each: function(callback) {\r\n                langx.each(this, callback);\r\n                return this;\r\n            },\r\n\r\n            filter: function(selector) {\r\n                if (isFunction(selector)) return this.not(this.not(selector))\r\n                return $(filter.call(this, function(element) {\r\n                    return finder.matches(element, selector)\r\n                }))\r\n            },\r\n\r\n            add: function(selector, context) {\r\n                return $(uniq(this.toArray().concat($(selector, context).toArray())));\r\n            },\r\n\r\n            is: function(selector) {\r\n                if (this.length > 0) {\r\n                    var self = this;\r\n                    if (langx.isString(selector)) {\r\n                        return some.call(self,function(elem) {\r\n                            return finder.matches(elem, selector);\r\n                        });\r\n                    } else if (langx.isArrayLike(selector)) {\r\n                       return some.call(self,function(elem) {\r\n                            return langx.inArray(elem, selector) > -1;\r\n                        });\r\n                    } else if (langx.isHtmlNode(selector)) {\r\n                       return some.call(self,function(elem) {\r\n                            return elem ==  selector;\r\n                        });\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            \r\n            not: function(selector) {\r\n                var nodes = []\r\n                if (isFunction(selector) && selector.call !== undefined)\r\n                    this.each(function(idx,node) {\r\n                        if (!selector.call(this, idx,node)) nodes.push(this)\r\n                    })\r\n                else {\r\n                    var excludes = typeof selector == 'string' ? this.filter(selector) :\r\n                        (isArrayLike(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)\r\n                    this.forEach(function(el) {\r\n                        if (excludes.indexOf(el) < 0) nodes.push(el)\r\n                    })\r\n                }\r\n                return $(nodes)\r\n            },\r\n\r\n            has: function(selector) {\r\n                return this.filter(function() {\r\n                    return isObject(selector) ?\r\n                        noder.contains(this, selector) :\r\n                        $(this).find(selector).size()\r\n                })\r\n            },\r\n\r\n            eq: function(idx) {\r\n                return idx === -1 ? this.slice(idx) : this.slice(idx, +idx + 1);\r\n            },\r\n\r\n            first: function() {\r\n                return this.eq(0);\r\n            },\r\n\r\n            last: function() {\r\n                return this.eq(-1);\r\n            },\r\n\r\n            find: wrapper_selector(finder.descendants, finder),\r\n\r\n            closest: wrapper_selector(finder.closest, finder),\r\n            /*\r\n                        closest: function(selector, context) {\r\n                            var node = this[0],\r\n                                collection = false\r\n                            if (typeof selector == 'object') collection = $(selector)\r\n                            while (node && !(collection ? collection.indexOf(node) >= 0 : finder.matches(node, selector)))\r\n                                node = node !== context && !isDocument(node) && node.parentNode\r\n                            return $(node)\r\n                        },\r\n            */\r\n\r\n\r\n            parents: wrapper_selector(finder.ancestors, finder),\r\n\r\n            parentsUntil: wrapper_selector_until(finder.ancestors, finder),\r\n\r\n\r\n            parent: wrapper_selector(finder.parent, finder),\r\n\r\n            children: wrapper_selector(finder.children, finder),\r\n\r\n            contents: wrapper_map(noder.contents, noder),\r\n\r\n            empty: wrapper_every_act(noder.empty, noder),\r\n\r\n            html: wrapper_value(noder.html, noder),\r\n\r\n            // `pluck` is borrowed from Prototype.js\r\n            pluck: function(property) {\r\n                return langx.map(this, function(el) {\r\n                    return el[property]\r\n                })\r\n            },\r\n\r\n            pushStack : function(elms) {\r\n                var ret = $(elms);\r\n                ret.prevObject = this;\r\n                return ret;\r\n            },\r\n            \r\n            replaceWith: function(newContent) {\r\n                return this.before(newContent).remove();\r\n            },\r\n\r\n            wrap: function(html) {\r\n                /*\r\n                var func = isFunction(structure)\r\n                if (this[0] && !func)\r\n                    var dom = $(structure).get(0),\r\n                        clone = dom.parentNode || this.length > 1\r\n\r\n                return this.each(function(index,node) {\r\n                    $(this).wrapAll(\r\n                        func ? structure.call(this, index,node) :\r\n                        clone ? dom.cloneNode(true) : dom\r\n                    )\r\n                })\r\n                */\r\n                var htmlIsFunction = typeof html === \"function\";\r\n\r\n                return this.each( function( i ) {\r\n                    $( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\r\n                } );                \r\n            },\r\n\r\n            wrapAll: function(html) {\r\n                /*\r\n                if (this[0]) {\r\n                    $(this[0]).before(wrappingElement = $(wrappingElement));\r\n                    var children;\r\n                    // drill down to the inmost element\r\n                    while ((children = wrappingElement.children()).length) {\r\n                        wrappingElement = children.first();\r\n                    }\r\n                    $(wrappingElement).append(this);\r\n                }\r\n                return this\r\n                */\r\n                var wrap;\r\n\r\n                if ( this[ 0 ] ) {\r\n                    if ( typeof html === \"function\" ) {\r\n                        html = html.call( this[ 0 ] );\r\n                    }\r\n\r\n                    // The elements to wrap the target around\r\n                    wrap = $( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\r\n\r\n                    if ( this[ 0 ].parentNode ) {\r\n                        wrap.insertBefore( this[ 0 ] );\r\n                    }\r\n\r\n                    wrap.map( function() {\r\n                        var elem = this;\r\n\r\n                        while ( elem.firstElementChild ) {\r\n                            elem = elem.firstElementChild;\r\n                        }\r\n\r\n                        return elem;\r\n                    } ).append( this );\r\n                }\r\n\r\n                return this;\r\n\r\n            },\r\n\r\n            wrapInner: function(html) {\r\n                /*\r\n                var func = isFunction(wrappingElement)\r\n                return this.each(function(index,node) {\r\n                    var self = $(this),\r\n                        contents = self.contents(),\r\n                        dom = func ? wrappingElement.call(this, index,node) : wrappingElement\r\n                    contents.length ? contents.wrapAll(dom) : self.append(dom)\r\n                })\r\n                */\r\n                if ( typeof html === \"function\" ) {\r\n                    return this.each( function( i ) {\r\n                        $( this ).wrapInner( html.call( this, i ) );\r\n                    } );\r\n                }\r\n\r\n                return this.each( function() {\r\n                    var self = $( this ),\r\n                        contents = self.contents();\r\n\r\n                    if ( contents.length ) {\r\n                        contents.wrapAll( html );\r\n\r\n                    } else {\r\n                        self.append( html );\r\n                    }\r\n                } );\r\n\r\n            },\r\n\r\n            unwrap: function(selector) {\r\n                /*\r\n                if (this.parent().children().length === 0) {\r\n                    // remove dom without text\r\n                    this.parent(selector).not(\"body\").each(function() {\r\n                        $(this).replaceWith(document.createTextNode(this.childNodes[0].textContent));\r\n                    });\r\n                } else {\r\n                    this.parent().each(function() {\r\n                        $(this).replaceWith($(this).children())\r\n                    });\r\n                }\r\n                return this\r\n                */\r\n                this.parent(selector).not(\"body\").each( function() {\r\n                    $(this).replaceWith(this.childNodes);\r\n                });\r\n                return this;\r\n\r\n            },\r\n\r\n            clone: function() {\r\n                return this.map(function() {\r\n                    return this.cloneNode(true)\r\n                })\r\n            },\r\n\r\n\r\n            toggle: function(setting) {\r\n                return this.each(function() {\r\n                    var el = $(this);\r\n                    (setting === undefined ? el.css(\"display\") == \"none\" : setting) ? el.show(): el.hide()\r\n                })\r\n            },\r\n\r\n            prev: function(selector) {\r\n                return $(this.pluck('previousElementSibling')).filter(selector || '*')\r\n            },\r\n\r\n            prevAll: wrapper_selector(finder.previousSiblings, finder),\r\n\r\n            next: function(selector) {\r\n                return $(this.pluck('nextElementSibling')).filter(selector || '*')\r\n            },\r\n\r\n            nextAll: wrapper_selector(finder.nextSiblings, finder),\r\n\r\n            siblings: wrapper_selector(finder.siblings, finder),\r\n\r\n            index: function(elem) {\r\n                if (elem) {\r\n                    return this.indexOf($(elem)[0]);\r\n                } else {\r\n                    return this.parent().children().indexOf(this[0]);\r\n                }\r\n            }\r\n        });\r\n\r\n        // for now\r\n        $.fn.detach = $.fn.remove;\r\n\r\n        $.fn.hover = function(fnOver, fnOut) {\r\n            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\r\n        };\r\n\r\n\r\n        var traverseNode = noder.traverse;\r\n\r\n\r\n        $.fn.after = wrapper_node_operation(noder.after, noder);\r\n\r\n        $.fn.prepend = wrapper_node_operation(noder.prepend, noder);\r\n\r\n        $.fn.before = wrapper_node_operation(noder.before, noder);\r\n\r\n        $.fn.append = wrapper_node_operation(noder.append, noder);\r\n\r\n\r\n        langx.each( {\r\n            appendTo: \"append\",\r\n            prependTo: \"prepend\",\r\n            insertBefore: \"before\",\r\n            insertAfter: \"after\",\r\n            replaceAll: \"replaceWith\"\r\n        }, function( name, original ) {\r\n            $.fn[ name ] = function( selector ) {\r\n                var elems,\r\n                    ret = [],\r\n                    insert = $( selector ),\r\n                    last = insert.length - 1,\r\n                    i = 0;\r\n\r\n                for ( ; i <= last; i++ ) {\r\n                    elems = i === last ? this : this.clone( true );\r\n                    $( insert[ i ] )[ original ]( elems );\r\n\r\n                    // Support: Android <=4.0 only, PhantomJS 1 only\r\n                    // .get() because push.apply(_, arraylike) throws on ancient WebKit\r\n                    push.apply( ret, elems.get() );\r\n                }\r\n\r\n                return this.pushStack( ret );\r\n            };\r\n        } );\r\n\r\n/*\r\n        $.fn.insertAfter = function(html) {\r\n            $(html).after(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.insertBefore = function(html) {\r\n            $(html).before(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.appendTo = function(html) {\r\n            $(html).append(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.prependTo = function(html) {\r\n            $(html).prepend(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.replaceAll = function(selector) {\r\n            $(selector).replaceWith(this);\r\n            return this;\r\n        };\r\n*/\r\n        return $;\r\n    })();\r\n\r\n    (function($) {\r\n        $.fn.scrollParent = function( includeHidden ) {\r\n            var position = this.css( \"position\" ),\r\n                excludeStaticParent = position === \"absolute\",\r\n                overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\r\n                scrollParent = this.parents().filter( function() {\r\n                    var parent = $( this );\r\n                    if ( excludeStaticParent && parent.css( \"position\" ) === \"static\" ) {\r\n                        return false;\r\n                    }\r\n                    return overflowRegex.test( parent.css( \"overflow\" ) + parent.css( \"overflow-y\" ) +\r\n                        parent.css( \"overflow-x\" ) );\r\n                } ).eq( 0 );\r\n\r\n            return position === \"fixed\" || !scrollParent.length ?\r\n                $( this[ 0 ].ownerDocument || document ) :\r\n                scrollParent;\r\n        };\r\n\r\n    })(query);\r\n\r\n\r\n    (function($) {\r\n        $.fn.end = function() {\r\n            return this.prevObject || $()\r\n        }\r\n\r\n        $.fn.andSelf = function() {\r\n            return this.add(this.prevObject || $())\r\n        }\r\n\r\n        $.fn.addBack = function(selector) {\r\n            if (this.prevObject) {\r\n                if (selector) {\r\n                    return this.add(this.prevObject.filter(selector));\r\n                } else {\r\n                    return this.add(this.prevObject);\r\n                }\r\n            } else {\r\n                return this;\r\n            }\r\n        }\r\n\r\n        'filter,add,not,eq,first,last,find,closest,parents,parent,children,siblings,prev,prevAll,next,nextAll'.split(',').forEach(function(property) {\r\n            var fn = $.fn[property]\r\n            $.fn[property] = function() {\r\n                var ret = fn.apply(this, arguments)\r\n                ret.prevObject = this\r\n                return ret\r\n            }\r\n        })\r\n    })(query);\r\n\r\n\r\n    (function($) {\r\n        $.fn.query = $.fn.find;\r\n\r\n        $.fn.place = function(refNode, position) {\r\n            // summary:\r\n            //      places elements of this node list relative to the first element matched\r\n            //      by queryOrNode. Returns the original NodeList. See: `dojo/dom-construct.place`\r\n            // queryOrNode:\r\n            //      may be a string representing any valid CSS3 selector or a DOM node.\r\n            //      In the selector case, only the first matching element will be used\r\n            //      for relative positioning.\r\n            // position:\r\n            //      can be one of:\r\n            //\r\n            //      -   \"last\" (default)\r\n            //      -   \"first\"\r\n            //      -   \"before\"\r\n            //      -   \"after\"\r\n            //      -   \"only\"\r\n            //      -   \"replace\"\r\n            //\r\n            //      or an offset in the childNodes\r\n            if (langx.isString(refNode)) {\r\n                refNode = finder.descendant(refNode);\r\n            } else if (isQ(refNode)) {\r\n                refNode = refNode[0];\r\n            }\r\n            return this.each(function(i, node) {\r\n                switch (position) {\r\n                    case \"before\":\r\n                        noder.before(refNode, node);\r\n                        break;\r\n                    case \"after\":\r\n                        noder.after(refNode, node);\r\n                        break;\r\n                    case \"replace\":\r\n                        noder.replace(refNode, node);\r\n                        break;\r\n                    case \"only\":\r\n                        noder.empty(refNode);\r\n                        noder.append(refNode, node);\r\n                        break;\r\n                    case \"first\":\r\n                        noder.prepend(refNode, node);\r\n                        break;\r\n                        // else fallthrough...\r\n                    default: // aka: last\r\n                        noder.append(refNode, node);\r\n                }\r\n            });\r\n        };\r\n\r\n        $.fn.addContent = function(content, position) {\r\n            if (content.template) {\r\n                content = langx.substitute(content.template, content);\r\n            }\r\n            return this.append(content);\r\n        };\r\n\r\n\r\n\r\n        $.fn.disableSelection = ( function() {\r\n            var eventType = \"onselectstart\" in document.createElement( \"div\" ) ?\r\n                \"selectstart\" :\r\n                \"mousedown\";\r\n\r\n            return function() {\r\n                return this.on( eventType + \".ui-disableSelection\", function( event ) {\r\n                    event.preventDefault();\r\n                } );\r\n            };\r\n        } )();\r\n\r\n        $.fn.enableSelection = function() {\r\n            return this.off( \".ui-disableSelection\" );\r\n        };\r\n\r\n        $.fn.reflow = function() {\r\n            return noder.reflow(this[0]);\r\n        };\r\n\r\n        $.fn.isBlockNode = function() {\r\n            return noder.isBlockNode(this[0]);\r\n        };\r\n       \r\n\r\n    })(query);\r\n\r\n    query.fn.plugin = function(name,options) {\r\n        var args = slice.call( arguments, 1 ),\r\n            self = this,\r\n            returnValue = this;\r\n\r\n        this.each(function(){\r\n            returnValue = plugins.instantiate.apply(self,[this,name].concat(args));\r\n        });\r\n        return returnValue;\r\n    };\r\n\r\n\r\n    query.wraps = {\r\n        wrapper_node_operation,\r\n        wrapper_map,\r\n        wrapper_value,\r\n        wrapper_selector,\r\n        wrapper_some_chk,\r\n        wrapper_selector_until,\r\n        wrapper_every_act_firstArgFunc,\r\n        wrapper_every_act,\r\n        wrapper_name_value\r\n\r\n    };\r\n\r\n    return skylark.attach(\"domx.query\", query);\r\n\r\n});\ndefine('skylark-domx-query/main',[\r\n\t\"./query\",\r\n\t\"skylark-domx-styler\"\r\n],function($,styler){\r\n\r\n    $.fn.disabled = $.wraps.wrapper_name_value(styler.disabled, styler);\r\n\r\n    $.fn.style = $.wraps.wrapper_name_value(styler.css, styler);\r\n\r\n    $.fn.css = $.wraps.wrapper_name_value(styler.css, styler);\r\n\r\n    //hasClass(name)\r\n    $.fn.hasClass = $.wraps.wrapper_some_chk(styler.hasClass, styler);\r\n\r\n    //addClass(name)\r\n    $.fn.addClass = $.wraps.wrapper_every_act_firstArgFunc(styler.addClass, styler, styler.className);\r\n\r\n    //removeClass(name)\r\n    $.fn.removeClass = $.wraps.wrapper_every_act_firstArgFunc(styler.removeClass, styler, styler.className);\r\n\r\n    //toogleClass(name,when)\r\n    $.fn.toggleClass = $.wraps.wrapper_every_act_firstArgFunc(styler.toggleClass, styler, styler.className);\r\n\r\n    $.fn.replaceClass = function(newClass, oldClass) {\r\n        this.removeClass(oldClass);\r\n        this.addClass(newClass);\r\n        return this;\r\n    };\r\n\r\n    $.fn.replaceClass = function(newClass, oldClass) {\r\n        this.removeClass(oldClass);\r\n        this.addClass(newClass);\r\n        return this;\r\n    };\r\n        \r\n\r\n\treturn $;\r\n});\ndefine('skylark-domx-query', ['skylark-domx-query/main'], function (main) { return main; });\n\n"]}