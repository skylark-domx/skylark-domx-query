{"version":3,"sources":["skylark-domx-query.js"],"names":["define","skylark","langx","noder","datax","eventer","finder","geom","styler","scripter","isQ","some","Array","prototype","push","slice","every","concat","filter","map","forEach","indexOf","sort","rquickExpr","funcArg","isArrayLike","isString","uniq","isFunction","type","isObject","isArray","isWindow","isDocument","isPlainObject","compact","flatten","camelCase","dasherize","children","wrapper_map","func","context","params","call","arguments","result","this","elem","idx","apply","query","wrapper_selector","last","selector","wrapper_selector_until","util","wrapper_every_act","each","node","wrapper_every_act_firstArgFunc","oldValueFunc","arg1","wrapper_some_chk","wrapper_name_value","name","value","isDefined","wrapper_value","newValue","$","NodeList","klass","klassName","init","match","nodes","props","doc","charAt","length","exec","createFragment","byId","ownerDoc","find","descendants","window","attr","object","ready","fn","mixin","el","i","get","undefined","toArray","size","remove","callback","not","element","matches","add","is","inArray","isHtmlNode","excludes","item","has","contains","eq","first","closest","parents","ancestors","parentsUntil","parent","contents","empty","pluck","property","pushStack","elms","ret","prevObject","replaceWith","newContent","before","wrap","structure","dom","clone","parentNode","index","wrapAll","cloneNode","wrappingElement","append","wrapInner","self","unwrap","document","createTextNode","childNodes","textContent","toggle","setting","css","show","hide","prev","prevAll","previousSiblings","next","nextAll","nextSiblings","siblings","html","text","removeAttr","prop","removeProp","data","removeData","val","offset","pagePosition","style","hasClass","addClass","className","removeClass","toggleClass","scrollTop","scrollLeft","position","options","of","posit","relativePosition","offsetParent","detach","hover","fnOver","fnOut","mouseenter","mouseleave","width","height","clientSize","dimension","Dimension","replace","m","toUpperCase","margin","cb","me","marginExtents","left","right","top","bottom","mb","innerWidth","clientWidth","innerHeight","clientHeight","traverse","wrapper_node_operation","argType","arg","after","prepend","appendTo","prependTo","insertBefore","insertAfter","replaceAll","original","elems","insert","on","off","trigger","split","event","one","scrollParent","includeHidden","excludeStaticParent","overflowRegex","test","ownerDocument","end","andSelf","addBack","eventType","place","refNode","descendant","addContent","content","template","substitute","replaceClass","newClass","oldClass","disableSelection","createElement","preventDefault","enableSelection","reflow","flow","isBlockNode","plugin","args","returnValue","plugins","instantiate","wraps","attach","main"],"mappings":"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","file":"../skylark-domx-query.js","sourcesContent":["define('skylark-domx-query/query',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-scripter\"\r\n], function(skylark, langx, noder, datax, eventer,  finder, geom, styler, scripter) {\r\n    var some = Array.prototype.some,\r\n        push = Array.prototype.push,\r\n        every = Array.prototype.every,\r\n        concat = Array.prototype.concat,\r\n        slice = Array.prototype.slice,\r\n        map = Array.prototype.map,\r\n        filter = Array.prototype.filter,\r\n        forEach = Array.prototype.forEach,\r\n        indexOf = Array.prototype.indexOf,\r\n        sort = Array.prototype.sort,\r\n        isQ;\r\n\r\n    var rquickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\r\n\r\n    var funcArg = langx.funcArg,\r\n        isArrayLike = langx.isArrayLike,\r\n        isString = langx.isString,\r\n        uniq = langx.uniq,\r\n        isFunction = langx.isFunction;\r\n\r\n    var type = langx.type,\r\n        isArray = langx.isArray,\r\n\r\n        isWindow = langx.isWindow,\r\n\r\n        isDocument = langx.isDocument,\r\n\r\n        isObject = langx.isObject,\r\n\r\n        isPlainObject = langx.isPlainObject,\r\n\r\n        compact = langx.compact,\r\n\r\n        flatten = langx.flatten,\r\n\r\n        camelCase = langx.camelCase,\r\n\r\n        dasherize = langx.dasherize,\r\n        children = finder.children;\r\n\r\n    function wrapper_map(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            var result = langx.map(self, function(elem, idx) {\r\n                return func.apply(context, [elem].concat(params));\r\n            });\r\n            return query(uniq(result));\r\n        }\r\n    }\r\n\r\n    function wrapper_selector(func, context, last) {\r\n        return function(selector) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            var result = this.map(function(idx, elem) {\r\n                // if (elem.nodeType == 1) {\r\n                //if (elem.querySelector) {\r\n                    return func.apply(context, last ? [elem] : [elem, selector]);\r\n                //}\r\n            });\r\n            if (last && selector) {\r\n                return result.filter(selector);\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    function wrapper_selector_until(func, context, last) {\r\n        return function(util, selector) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            //if (selector === undefined) { //TODO : needs confirm?\r\n            //    selector = util;\r\n            //    util = undefined;\r\n            //}\r\n            var result = this.map(function(idx, elem) {\r\n                // if (elem.nodeType == 1) { // TODO\r\n                //if (elem.querySelector) {\r\n                    return func.apply(context, last ? [elem, util] : [elem, selector, util]);\r\n                //}\r\n            });\r\n            if (last && selector) {\r\n                return result.filter(selector);\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function wrapper_every_act(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            this.each(function(idx,node) {\r\n                func.apply(context, [this].concat(params));\r\n            });\r\n            return self;\r\n        }\r\n    }\r\n\r\n    function wrapper_every_act_firstArgFunc(func, context, oldValueFunc) {\r\n        return function(arg1) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            forEach.call(self, function(elem, idx) {\r\n                var newArg1 = funcArg(elem, arg1, idx, oldValueFunc(elem));\r\n                func.apply(context, [elem, arg1].concat(params.slice(1)));\r\n            });\r\n            return self;\r\n        }\r\n    }\r\n\r\n    function wrapper_some_chk(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            return some.call(self, function(elem) {\r\n                return func.apply(context, [elem].concat(params));\r\n            });\r\n        }\r\n    }\r\n\r\n    function wrapper_name_value(func, context, oldValueFunc) {\r\n        return function(name, value) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n\r\n            if (langx.isPlainObject(name) || langx.isDefined(value)) {\r\n                forEach.call(self, function(elem, idx) {\r\n                    var newValue;\r\n                    if (oldValueFunc) {\r\n                        newValue = funcArg(elem, value, idx, oldValueFunc(elem, name));\r\n                    } else {\r\n                        newValue = value\r\n                    }\r\n                    func.apply(context, [elem].concat(params));\r\n                });\r\n                return self;\r\n            } else {\r\n                if (self[0]) {\r\n                    return func.apply(context, [self[0], name]);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function wrapper_value(func, context, oldValueFunc) {\r\n        return function(value) {\r\n            var self = this;\r\n\r\n            if (langx.isDefined(value)) {\r\n                forEach.call(self, function(elem, idx) {\r\n                    var newValue;\r\n                    if (oldValueFunc) {\r\n                        newValue = funcArg(elem, value, idx, oldValueFunc(elem));\r\n                    } else {\r\n                        newValue = value\r\n                    }\r\n                    func.apply(context, [elem, newValue]);\r\n                });\r\n                return self;\r\n            } else {\r\n                if (self[0]) {\r\n                    return func.apply(context, [self[0]]);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    var NodeList = langx.klass({\r\n        klassName: \"SkNodeList\",\r\n        init: function(selector, context) {\r\n            var self = this,\r\n                match, nodes, node, props;\r\n\r\n            if (selector) {\r\n                self.context = context = context || noder.doc();\r\n\r\n                if (isString(selector)) {\r\n                    // a html string or a css selector is expected\r\n                    self.selector = selector;\r\n\r\n                    if (selector.charAt(0) === \"<\" && selector.charAt(selector.length - 1) === \">\" && selector.length >= 3) {\r\n                        match = [null, selector, null];\r\n                    } else {\r\n                        match = rquickExpr.exec(selector);\r\n                    }\r\n\r\n                    if (match) {\r\n                        if (match[1]) {\r\n                            // if selector is html\r\n                            nodes = noder.createFragment(selector);\r\n\r\n                            if (langx.isPlainObject(context)) {\r\n                                props = context;\r\n                            }\r\n\r\n                        } else {\r\n                            node = finder.byId(match[2], noder.ownerDoc(context));\r\n\r\n                            if (node) {\r\n                                // if selector is id\r\n                                nodes = [node];\r\n                            }\r\n\r\n                        }\r\n                    } else {\r\n                        // if selector is css selector\r\n                        if (langx.isString(context)) {\r\n                            context = finder.find(context);\r\n                        }\r\n\r\n                        nodes = finder.descendants(context, selector);\r\n                    }\r\n                } else {\r\n                    if (selector !== window && isArrayLike(selector)) {\r\n                        // a dom node array is expected\r\n                        nodes = selector;\r\n                    } else {\r\n                        // a dom node is expected\r\n                        nodes = [selector];\r\n                    }\r\n                    //self.add(selector, false);\r\n                }\r\n            }\r\n\r\n\r\n            if (nodes) {\r\n\r\n                push.apply(self, nodes);\r\n\r\n                if (props) {\r\n                    for ( var name  in props ) {\r\n                        // Properties of context are called as methods if possible\r\n                        if ( langx.isFunction( this[ name ] ) ) {\r\n                            this[ name ]( props[ name ] );\r\n                        } else {\r\n                            this.attr( name, props[ name ] );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return self;\r\n        }\r\n    });\r\n\r\n    var query = (function() {\r\n        isQ = function(object) {\r\n            return object instanceof NodeList;\r\n        }\r\n        init = function(selector, context) {\r\n            return new NodeList(selector, context);\r\n        }\r\n\r\n        var $ = function(selector, context) {\r\n            if (isFunction(selector)) {\r\n                eventer.ready(function() {\r\n                    selector($);\r\n                });\r\n            } else if (isQ(selector)) {\r\n                return selector;\r\n            } else {\r\n                if (context && isQ(context) && isString(selector)) {\r\n                    return context.find(selector);\r\n                }\r\n                return init(selector, context);\r\n            }\r\n        };\r\n\r\n        $.fn = NodeList.prototype;\r\n        langx.mixin($.fn, {\r\n            // `map` and `slice` in the jQuery API work differently\r\n            // from their array counterparts\r\n            length : 0,\r\n\r\n            map: function(fn) {\r\n                return $(uniq(langx.map(this, function(el, i) {\r\n                    return fn.call(el, i, el)\r\n                })));\r\n            },\r\n\r\n            slice: function() {\r\n                return $(slice.apply(this, arguments))\r\n            },\r\n\r\n            forEach: function() {\r\n                return forEach.apply(this,arguments);\r\n            },\r\n\r\n            get: function(idx) {\r\n                return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]\r\n            },\r\n\r\n            indexOf: function() {\r\n                return indexOf.apply(this,arguments);\r\n            },\r\n\r\n            sort : function() {\r\n                return sort.apply(this,arguments);\r\n            },\r\n\r\n            toArray: function() {\r\n                return slice.call(this);\r\n            },\r\n\r\n            size: function() {\r\n                return this.length\r\n            },\r\n\r\n            //remove: wrapper_every_act(noder.remove, noder),\r\n            remove : function(selector) {\r\n                if (selector) {\r\n                    return this.find(selector).remove();\r\n                }\r\n                this.each(function(i,node){\r\n                    noder.remove(node);\r\n                });\r\n                return this;\r\n            },\r\n\r\n            each: function(callback) {\r\n                langx.each(this, callback);\r\n                return this;\r\n            },\r\n\r\n            filter: function(selector) {\r\n                if (isFunction(selector)) return this.not(this.not(selector))\r\n                return $(filter.call(this, function(element) {\r\n                    return finder.matches(element, selector)\r\n                }))\r\n            },\r\n\r\n            add: function(selector, context) {\r\n                return $(uniq(this.toArray().concat($(selector, context).toArray())));\r\n            },\r\n\r\n            is: function(selector) {\r\n                if (this.length > 0) {\r\n                    var self = this;\r\n                    if (langx.isString(selector)) {\r\n                        return some.call(self,function(elem) {\r\n                            return finder.matches(elem, selector);\r\n                        });\r\n                    } else if (langx.isArrayLike(selector)) {\r\n                       return some.call(self,function(elem) {\r\n                            return langx.inArray(elem, selector) > -1;\r\n                        });\r\n                    } else if (langx.isHtmlNode(selector)) {\r\n                       return some.call(self,function(elem) {\r\n                            return elem ==  selector;\r\n                        });\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            \r\n            not: function(selector) {\r\n                var nodes = []\r\n                if (isFunction(selector) && selector.call !== undefined)\r\n                    this.each(function(idx,node) {\r\n                        if (!selector.call(this, idx,node)) nodes.push(this)\r\n                    })\r\n                else {\r\n                    var excludes = typeof selector == 'string' ? this.filter(selector) :\r\n                        (isArrayLike(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)\r\n                    this.forEach(function(el) {\r\n                        if (excludes.indexOf(el) < 0) nodes.push(el)\r\n                    })\r\n                }\r\n                return $(nodes)\r\n            },\r\n\r\n            has: function(selector) {\r\n                return this.filter(function() {\r\n                    return isObject(selector) ?\r\n                        noder.contains(this, selector) :\r\n                        $(this).find(selector).size()\r\n                })\r\n            },\r\n\r\n            eq: function(idx) {\r\n                return idx === -1 ? this.slice(idx) : this.slice(idx, +idx + 1);\r\n            },\r\n\r\n            first: function() {\r\n                return this.eq(0);\r\n            },\r\n\r\n            last: function() {\r\n                return this.eq(-1);\r\n            },\r\n\r\n            find: wrapper_selector(finder.descendants, finder),\r\n\r\n            closest: wrapper_selector(finder.closest, finder),\r\n            /*\r\n                        closest: function(selector, context) {\r\n                            var node = this[0],\r\n                                collection = false\r\n                            if (typeof selector == 'object') collection = $(selector)\r\n                            while (node && !(collection ? collection.indexOf(node) >= 0 : finder.matches(node, selector)))\r\n                                node = node !== context && !isDocument(node) && node.parentNode\r\n                            return $(node)\r\n                        },\r\n            */\r\n\r\n\r\n            parents: wrapper_selector(finder.ancestors, finder),\r\n\r\n            parentsUntil: wrapper_selector_until(finder.ancestors, finder),\r\n\r\n\r\n            parent: wrapper_selector(finder.parent, finder),\r\n\r\n            children: wrapper_selector(finder.children, finder),\r\n\r\n            contents: wrapper_map(noder.contents, noder),\r\n\r\n            empty: wrapper_every_act(noder.empty, noder),\r\n\r\n            // `pluck` is borrowed from Prototype.js\r\n            pluck: function(property) {\r\n                return langx.map(this, function(el) {\r\n                    return el[property]\r\n                })\r\n            },\r\n\r\n            pushStack : function(elms) {\r\n                var ret = $(elms);\r\n                ret.prevObject = this;\r\n                return ret;\r\n            },\r\n            \r\n            replaceWith: function(newContent) {\r\n                return this.before(newContent).remove();\r\n            },\r\n\r\n            wrap: function(structure) {\r\n                var func = isFunction(structure)\r\n                if (this[0] && !func)\r\n                    var dom = $(structure).get(0),\r\n                        clone = dom.parentNode || this.length > 1\r\n\r\n                return this.each(function(index,node) {\r\n                    $(this).wrapAll(\r\n                        func ? structure.call(this, index,node) :\r\n                        clone ? dom.cloneNode(true) : dom\r\n                    )\r\n                })\r\n            },\r\n\r\n            wrapAll: function(wrappingElement) {\r\n                if (this[0]) {\r\n                    $(this[0]).before(wrappingElement = $(wrappingElement));\r\n                    var children;\r\n                    // drill down to the inmost element\r\n                    while ((children = wrappingElement.children()).length) {\r\n                        wrappingElement = children.first();\r\n                    }\r\n                    $(wrappingElement).append(this);\r\n                }\r\n                return this\r\n            },\r\n\r\n            wrapInner: function(wrappingElement) {\r\n                var func = isFunction(wrappingElement)\r\n                return this.each(function(index,node) {\r\n                    var self = $(this),\r\n                        contents = self.contents(),\r\n                        dom = func ? wrappingElement.call(this, index,node) : wrappingElement\r\n                    contents.length ? contents.wrapAll(dom) : self.append(dom)\r\n                })\r\n            },\r\n\r\n            unwrap: function(selector) {\r\n                if (this.parent().children().length === 0) {\r\n                    // remove dom without text\r\n                    this.parent(selector).not(\"body\").each(function() {\r\n                        $(this).replaceWith(document.createTextNode(this.childNodes[0].textContent));\r\n                    });\r\n                } else {\r\n                    this.parent().each(function() {\r\n                        $(this).replaceWith($(this).children())\r\n                    });\r\n                }\r\n                return this\r\n            },\r\n\r\n            clone: function() {\r\n                return this.map(function() {\r\n                    return this.cloneNode(true)\r\n                })\r\n            },\r\n\r\n\r\n            toggle: function(setting) {\r\n                return this.each(function() {\r\n                    var el = $(this);\r\n                    (setting === undefined ? el.css(\"display\") == \"none\" : setting) ? el.show(): el.hide()\r\n                })\r\n            },\r\n\r\n            prev: function(selector) {\r\n                return $(this.pluck('previousElementSibling')).filter(selector || '*')\r\n            },\r\n\r\n            prevAll: wrapper_selector(finder.previousSiblings, finder),\r\n\r\n            next: function(selector) {\r\n                return $(this.pluck('nextElementSibling')).filter(selector || '*')\r\n            },\r\n\r\n            nextAll: wrapper_selector(finder.nextSiblings, finder),\r\n\r\n            siblings: wrapper_selector(finder.siblings, finder),\r\n\r\n            html: wrapper_value(scripter.html, scripter, scripter.html),\r\n\r\n            text: wrapper_value(datax.text, datax, datax.text),\r\n\r\n            attr: wrapper_name_value(datax.attr, datax, datax.attr),\r\n\r\n            removeAttr: wrapper_every_act(datax.removeAttr, datax),\r\n\r\n            prop: wrapper_name_value(datax.prop, datax, datax.prop),\r\n\r\n            removeProp: wrapper_every_act(datax.removeProp, datax),\r\n\r\n            data: wrapper_name_value(datax.data, datax, datax.data),\r\n\r\n            removeData: wrapper_every_act(datax.removeData, datax),\r\n\r\n            val: wrapper_value(datax.val, datax, datax.val),\r\n\r\n            offset: wrapper_value(geom.pagePosition, geom, geom.pagePosition),\r\n\r\n            style: wrapper_name_value(styler.css, styler),\r\n\r\n            css: wrapper_name_value(styler.css, styler),\r\n\r\n            index: function(elem) {\r\n                if (elem) {\r\n                    return this.indexOf($(elem)[0]);\r\n                } else {\r\n                    return this.parent().children().indexOf(this[0]);\r\n                }\r\n            },\r\n\r\n            //hasClass(name)\r\n            hasClass: wrapper_some_chk(styler.hasClass, styler),\r\n\r\n            //addClass(name)\r\n            addClass: wrapper_every_act_firstArgFunc(styler.addClass, styler, styler.className),\r\n\r\n            //removeClass(name)\r\n            removeClass: wrapper_every_act_firstArgFunc(styler.removeClass, styler, styler.className),\r\n\r\n            //toogleClass(name,when)\r\n            toggleClass: wrapper_every_act_firstArgFunc(styler.toggleClass, styler, styler.className),\r\n\r\n            scrollTop: wrapper_value(geom.scrollTop, geom),\r\n\r\n            scrollLeft: wrapper_value(geom.scrollLeft, geom),\r\n\r\n            position: function(options) {\r\n                if (!this.length) return\r\n\r\n                if (options) {\r\n                    if (options.of && options.of.length) {\r\n                        options = langx.clone(options);\r\n                        options.of = options.of[0];\r\n                    }\r\n                    return this.each( function() {\r\n                        geom.posit(this,options);\r\n                    });\r\n                } else {\r\n                    var elem = this[0];\r\n\r\n                    return geom.relativePosition(elem);\r\n\r\n                }             \r\n            },\r\n\r\n            offsetParent: wrapper_map(geom.offsetParent, geom)\r\n        });\r\n\r\n        // for now\r\n        $.fn.detach = $.fn.remove;\r\n\r\n        $.fn.hover = function(fnOver, fnOut) {\r\n            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\r\n        };\r\n\r\n        $.fn.size = wrapper_value(geom.size, geom);\r\n\r\n        $.fn.width = wrapper_value(geom.width, geom, geom.width);\r\n\r\n        $.fn.height = wrapper_value(geom.height, geom, geom.height);\r\n\r\n        $.fn.clientSize = wrapper_value(geom.clientSize, geom.clientSize);\r\n\r\n        ['width', 'height'].forEach(function(dimension) {\r\n            var offset, Dimension = dimension.replace(/./, function(m) {\r\n                return m[0].toUpperCase()\r\n            });\r\n\r\n            $.fn['outer' + Dimension] = function(margin, value) {\r\n                if (arguments.length) {\r\n                    if (typeof margin !== 'boolean') {\r\n                        value = margin;\r\n                        margin = false;\r\n                    }\r\n                } else {\r\n                    margin = false;\r\n                    value = undefined;\r\n                }\r\n\r\n                if (value === undefined) {\r\n                    var el = this[0];\r\n                    if (!el) {\r\n                        return undefined;\r\n                    }\r\n                    var cb = geom.size(el);\r\n                    if (margin) {\r\n                        var me = geom.marginExtents(el);\r\n                        cb.width = cb.width + me.left + me.right;\r\n                        cb.height = cb.height + me.top + me.bottom;\r\n                    }\r\n                    return dimension === \"width\" ? cb.width : cb.height;\r\n                } else {\r\n                    return this.each(function(idx, el) {\r\n                        var mb = {};\r\n                        var me = geom.marginExtents(el);\r\n                        if (dimension === \"width\") {\r\n                            mb.width = value;\r\n                            if (margin) {\r\n                                mb.width = mb.width - me.left - me.right\r\n                            }\r\n                        } else {\r\n                            mb.height = value;\r\n                            if (margin) {\r\n                                mb.height = mb.height - me.top - me.bottom;\r\n                            }\r\n                        }\r\n                        geom.size(el, mb);\r\n                    })\r\n\r\n                }\r\n            };\r\n        })\r\n\r\n        $.fn.innerWidth = wrapper_value(geom.clientWidth, geom, geom.clientWidth);\r\n\r\n        $.fn.innerHeight = wrapper_value(geom.clientHeight, geom, geom.clientHeight);\r\n\r\n        var traverseNode = noder.traverse;\r\n\r\n        function wrapper_node_operation(func, context, oldValueFunc) {\r\n            return function(html) {\r\n                var argType, nodes = langx.map(arguments, function(arg) {\r\n                    argType = type(arg)\r\n                    return argType == \"function\" || argType == \"object\" || argType == \"array\" || arg == null ?\r\n                        arg : noder.createFragment(arg)\r\n                });\r\n                if (nodes.length < 1) {\r\n                    return this\r\n                }\r\n                this.each(function(idx) {\r\n                    func.apply(context, [this, nodes, idx > 0]);\r\n                });\r\n                return this;\r\n            }\r\n        }\r\n\r\n\r\n        $.fn.after = wrapper_node_operation(noder.after, noder);\r\n\r\n        $.fn.prepend = wrapper_node_operation(noder.prepend, noder);\r\n\r\n        $.fn.before = wrapper_node_operation(noder.before, noder);\r\n\r\n        $.fn.append = wrapper_node_operation(noder.append, noder);\r\n\r\n\r\n        langx.each( {\r\n            appendTo: \"append\",\r\n            prependTo: \"prepend\",\r\n            insertBefore: \"before\",\r\n            insertAfter: \"after\",\r\n            replaceAll: \"replaceWith\"\r\n        }, function( name, original ) {\r\n            $.fn[ name ] = function( selector ) {\r\n                var elems,\r\n                    ret = [],\r\n                    insert = $( selector ),\r\n                    last = insert.length - 1,\r\n                    i = 0;\r\n\r\n                for ( ; i <= last; i++ ) {\r\n                    elems = i === last ? this : this.clone( true );\r\n                    $( insert[ i ] )[ original ]( elems );\r\n\r\n                    // Support: Android <=4.0 only, PhantomJS 1 only\r\n                    // .get() because push.apply(_, arraylike) throws on ancient WebKit\r\n                    push.apply( ret, elems.get() );\r\n                }\r\n\r\n                return this.pushStack( ret );\r\n            };\r\n        } );\r\n\r\n/*\r\n        $.fn.insertAfter = function(html) {\r\n            $(html).after(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.insertBefore = function(html) {\r\n            $(html).before(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.appendTo = function(html) {\r\n            $(html).append(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.prependTo = function(html) {\r\n            $(html).prepend(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.replaceAll = function(selector) {\r\n            $(selector).replaceWith(this);\r\n            return this;\r\n        };\r\n*/\r\n        return $;\r\n    })();\r\n\r\n    (function($) {\r\n        $.fn.on = wrapper_every_act(eventer.on, eventer);\r\n\r\n        $.fn.off = wrapper_every_act(eventer.off, eventer);\r\n\r\n        $.fn.trigger = wrapper_every_act(eventer.trigger, eventer);\r\n\r\n        ('focusin focusout focus blur load resize scroll unload click dblclick ' +\r\n            'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +\r\n            'change select keydown keypress keyup error transitionEnd').split(' ').forEach(function(event) {\r\n            $.fn[event] = function(data, callback) {\r\n                return (0 in arguments) ?\r\n                    this.on(event, data, callback) :\r\n                    this.trigger(event)\r\n            }\r\n        });\r\n\r\n        $.fn.one = function(event, selector, data, callback) {\r\n            if (!langx.isString(selector) && !langx.isFunction(callback)) {\r\n                callback = data;\r\n                data = selector;\r\n                selector = null;\r\n            }\r\n\r\n            if (langx.isFunction(data)) {\r\n                callback = data;\r\n                data = null;\r\n            }\r\n\r\n            return this.on(event, selector, data, callback, 1)\r\n        };\r\n\r\n\r\n        $.fn.scrollParent = function( includeHidden ) {\r\n            var position = this.css( \"position\" ),\r\n                excludeStaticParent = position === \"absolute\",\r\n                overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\r\n                scrollParent = this.parents().filter( function() {\r\n                    var parent = $( this );\r\n                    if ( excludeStaticParent && parent.css( \"position\" ) === \"static\" ) {\r\n                        return false;\r\n                    }\r\n                    return overflowRegex.test( parent.css( \"overflow\" ) + parent.css( \"overflow-y\" ) +\r\n                        parent.css( \"overflow-x\" ) );\r\n                } ).eq( 0 );\r\n\r\n            return position === \"fixed\" || !scrollParent.length ?\r\n                $( this[ 0 ].ownerDocument || document ) :\r\n                scrollParent;\r\n        };\r\n\r\n    })(query);\r\n\r\n\r\n    (function($) {\r\n        $.fn.end = function() {\r\n            return this.prevObject || $()\r\n        }\r\n\r\n        $.fn.andSelf = function() {\r\n            return this.add(this.prevObject || $())\r\n        }\r\n\r\n        $.fn.addBack = function(selector) {\r\n            if (this.prevObject) {\r\n                if (selector) {\r\n                    return this.add(this.prevObject.filter(selector));\r\n                } else {\r\n                    return this.add(this.prevObject);\r\n                }\r\n            } else {\r\n                return this;\r\n            }\r\n        }\r\n\r\n        'filter,add,not,eq,first,last,find,closest,parents,parent,children,siblings,prev,prevAll,next,nextAll'.split(',').forEach(function(property) {\r\n            var fn = $.fn[property]\r\n            $.fn[property] = function() {\r\n                var ret = fn.apply(this, arguments)\r\n                ret.prevObject = this\r\n                return ret\r\n            }\r\n        })\r\n    })(query);\r\n\r\n\r\n    (function($) {\r\n        $.fn.query = $.fn.find;\r\n\r\n        $.fn.place = function(refNode, position) {\r\n            // summary:\r\n            //      places elements of this node list relative to the first element matched\r\n            //      by queryOrNode. Returns the original NodeList. See: `dojo/dom-construct.place`\r\n            // queryOrNode:\r\n            //      may be a string representing any valid CSS3 selector or a DOM node.\r\n            //      In the selector case, only the first matching element will be used\r\n            //      for relative positioning.\r\n            // position:\r\n            //      can be one of:\r\n            //\r\n            //      -   \"last\" (default)\r\n            //      -   \"first\"\r\n            //      -   \"before\"\r\n            //      -   \"after\"\r\n            //      -   \"only\"\r\n            //      -   \"replace\"\r\n            //\r\n            //      or an offset in the childNodes\r\n            if (langx.isString(refNode)) {\r\n                refNode = finder.descendant(refNode);\r\n            } else if (isQ(refNode)) {\r\n                refNode = refNode[0];\r\n            }\r\n            return this.each(function(i, node) {\r\n                switch (position) {\r\n                    case \"before\":\r\n                        noder.before(refNode, node);\r\n                        break;\r\n                    case \"after\":\r\n                        noder.after(refNode, node);\r\n                        break;\r\n                    case \"replace\":\r\n                        noder.replace(refNode, node);\r\n                        break;\r\n                    case \"only\":\r\n                        noder.empty(refNode);\r\n                        noder.append(refNode, node);\r\n                        break;\r\n                    case \"first\":\r\n                        noder.prepend(refNode, node);\r\n                        break;\r\n                        // else fallthrough...\r\n                    default: // aka: last\r\n                        noder.append(refNode, node);\r\n                }\r\n            });\r\n        };\r\n\r\n        $.fn.addContent = function(content, position) {\r\n            if (content.template) {\r\n                content = langx.substitute(content.template, content);\r\n            }\r\n            return this.append(content);\r\n        };\r\n\r\n        $.fn.replaceClass = function(newClass, oldClass) {\r\n            this.removeClass(oldClass);\r\n            this.addClass(newClass);\r\n            return this;\r\n        };\r\n\r\n        $.fn.replaceClass = function(newClass, oldClass) {\r\n            this.removeClass(oldClass);\r\n            this.addClass(newClass);\r\n            return this;\r\n        };\r\n\r\n        $.fn.disableSelection = ( function() {\r\n            var eventType = \"onselectstart\" in document.createElement( \"div\" ) ?\r\n                \"selectstart\" :\r\n                \"mousedown\";\r\n\r\n            return function() {\r\n                return this.on( eventType + \".ui-disableSelection\", function( event ) {\r\n                    event.preventDefault();\r\n                } );\r\n            };\r\n        } )();\r\n\r\n        $.fn.enableSelection = function() {\r\n            return this.off( \".ui-disableSelection\" );\r\n        };\r\n\r\n        $.fn.reflow = function() {\r\n            return noder.flow(this[0]);\r\n        };\r\n\r\n        $.fn.isBlockNode = function() {\r\n            return noder.isBlockNode(this[0]);\r\n        };\r\n       \r\n\r\n    })(query);\r\n\r\n    query.fn.plugin = function(name,options) {\r\n        var args = slice.call( arguments, 1 ),\r\n            self = this,\r\n            returnValue = this;\r\n\r\n        this.each(function(){\r\n            returnValue = plugins.instantiate.apply(self,[this,name].concat(args));\r\n        });\r\n        return returnValue;\r\n    };\r\n\r\n\r\n    query.wraps = {\r\n        wrapper_node_operation,\r\n        wrapper_map,\r\n        wrapper_value,\r\n        wrapper_selector,\r\n        wrapper_some_chk,\r\n        wrapper_selector_until,\r\n        wrapper_every_act_firstArgFunc,\r\n        wrapper_every_act,\r\n        wrapper_name_value\r\n\r\n    };\r\n\r\n    return skylark.attach(\"domx.query\", query);\r\n\r\n});\ndefine('skylark-domx-query/main',[\r\n\t\"./query\"\r\n],function(query){\r\n\treturn query;\r\n});\ndefine('skylark-domx-query', ['skylark-domx-query/main'], function (main) { return main; });\n\n"]}