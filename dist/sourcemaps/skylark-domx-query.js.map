{"version":3,"sources":["skylark-domx-query.js"],"names":["define","skylark","langx","noder","finder","isQ","some","Array","prototype","push","slice","every","concat","filter","map","forEach","indexOf","sort","rquickExpr","funcArg","isArrayLike","isString","uniq","isFunction","type","isObject","isArray","isWindow","isDocument","isPlainObject","compact","flatten","camelCase","dasherize","children","wrapper_map","func","context","params","call","arguments","result","this","elem","idx","apply","query","wrapper_selector","last","selector","wrapper_selector_until","util","wrapper_every_act","each","node","$","NodeList","klass","klassName","init","match","nodes","props","doc","charAt","length","exec","createFragment","byId","ownerDoc","find","descendants","window","name","attr","object","ready","fn","mixin","el","i","get","undefined","toArray","size","remove","callback","not","element","matches","add","is","inArray","isHtmlNode","excludes","item","has","contains","eq","first","closest","parents","ancestors","parentsUntil","parent","contents","empty","pluck","property","pushStack","elms","ret","prevObject","replaceWith","newContent","before","wrap","structure","dom","clone","parentNode","index","wrapAll","cloneNode","wrappingElement","append","wrapInner","self","unwrap","document","createTextNode","childNodes","textContent","toggle","setting","css","show","hide","prev","prevAll","previousSiblings","next","nextAll","nextSiblings","siblings","detach","hover","fnOver","fnOut","mouseenter","mouseleave","traverse","wrapper_node_operation","oldValueFunc","html","argType","arg","after","prepend","appendTo","prependTo","insertBefore","insertAfter","replaceAll","original","elems","insert","scrollParent","includeHidden","position","excludeStaticParent","overflowRegex","test","ownerDocument","end","andSelf","addBack","split","eventType","place","refNode","descendant","replace","addContent","content","template","substitute","disableSelection","createElement","on","event","preventDefault","enableSelection","off","reflow","flow","isBlockNode","plugin","options","args","returnValue","plugins","instantiate","wraps","wrapper_value","value","isDefined","newValue","wrapper_some_chk","wrapper_every_act_firstArgFunc","arg1","wrapper_name_value","attach","main"],"mappings":"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","file":"../skylark-domx-query.js","sourcesContent":["define('skylark-domx-query/query',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\"\r\n], function(skylark, langx, noder, finder) {\r\n    var some = Array.prototype.some,\r\n        push = Array.prototype.push,\r\n        every = Array.prototype.every,\r\n        concat = Array.prototype.concat,\r\n        slice = Array.prototype.slice,\r\n        map = Array.prototype.map,\r\n        filter = Array.prototype.filter,\r\n        forEach = Array.prototype.forEach,\r\n        indexOf = Array.prototype.indexOf,\r\n        sort = Array.prototype.sort,\r\n        isQ;\r\n\r\n    var rquickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\r\n\r\n    var funcArg = langx.funcArg,\r\n        isArrayLike = langx.isArrayLike,\r\n        isString = langx.isString,\r\n        uniq = langx.uniq,\r\n        isFunction = langx.isFunction;\r\n\r\n    var type = langx.type,\r\n        isArray = langx.isArray,\r\n\r\n        isWindow = langx.isWindow,\r\n\r\n        isDocument = langx.isDocument,\r\n\r\n        isObject = langx.isObject,\r\n\r\n        isPlainObject = langx.isPlainObject,\r\n\r\n        compact = langx.compact,\r\n\r\n        flatten = langx.flatten,\r\n\r\n        camelCase = langx.camelCase,\r\n\r\n        dasherize = langx.dasherize,\r\n        children = finder.children;\r\n\r\n    function wrapper_map(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            var result = langx.map(self, function(elem, idx) {\r\n                return func.apply(context, [elem].concat(params));\r\n            });\r\n            return query(uniq(result));\r\n        }\r\n    }\r\n\r\n    function wrapper_selector(func, context, last) {\r\n        return function(selector) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            var result = this.map(function(idx, elem) {\r\n                // if (elem.nodeType == 1) {\r\n                //if (elem.querySelector) {\r\n                    return func.apply(context, last ? [elem] : [elem, selector]);\r\n                //}\r\n            });\r\n            if (last && selector) {\r\n                return result.filter(selector);\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    function wrapper_selector_until(func, context, last) {\r\n        return function(util, selector) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            //if (selector === undefined) { //TODO : needs confirm?\r\n            //    selector = util;\r\n            //    util = undefined;\r\n            //}\r\n            var result = this.map(function(idx, elem) {\r\n                // if (elem.nodeType == 1) { // TODO\r\n                //if (elem.querySelector) {\r\n                    return func.apply(context, last ? [elem, util] : [elem, selector, util]);\r\n                //}\r\n            });\r\n            if (last && selector) {\r\n                return result.filter(selector);\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function wrapper_every_act(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            this.each(function(idx,node) {\r\n                func.apply(context, [this].concat(params));\r\n            });\r\n            return self;\r\n        }\r\n    }\r\n\r\n    function wrapper_every_act_firstArgFunc(func, context, oldValueFunc) {\r\n        return function(arg1) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            forEach.call(self, function(elem, idx) {\r\n                var newArg1 = funcArg(elem, arg1, idx, oldValueFunc(elem));\r\n                func.apply(context, [elem, arg1].concat(params.slice(1)));\r\n            });\r\n            return self;\r\n        }\r\n    }\r\n\r\n    function wrapper_some_chk(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            return some.call(self, function(elem) {\r\n                return func.apply(context, [elem].concat(params));\r\n            });\r\n        }\r\n    }\r\n\r\n    function wrapper_name_value(func, context, oldValueFunc) {\r\n        return function(name, value) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n\r\n            if (langx.isPlainObject(name) || langx.isDefined(value)) {\r\n                forEach.call(self, function(elem, idx) {\r\n                    var newValue;\r\n                    if (oldValueFunc) {\r\n                        newValue = funcArg(elem, value, idx, oldValueFunc(elem, name));\r\n                    } else {\r\n                        newValue = value\r\n                    }\r\n                    func.apply(context, [elem].concat(params));\r\n                });\r\n                return self;\r\n            } else {\r\n                if (self[0]) {\r\n                    return func.apply(context, [self[0], name]);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function wrapper_value(func, context, oldValueFunc) {\r\n        return function(value) {\r\n            var self = this;\r\n\r\n            if (langx.isDefined(value)) {\r\n                forEach.call(self, function(elem, idx) {\r\n                    var newValue;\r\n                    if (oldValueFunc) {\r\n                        newValue = funcArg(elem, value, idx, oldValueFunc(elem));\r\n                    } else {\r\n                        newValue = value\r\n                    }\r\n                    func.apply(context, [elem, newValue]);\r\n                });\r\n                return self;\r\n            } else {\r\n                if (self[0]) {\r\n                    return func.apply(context, [self[0]]);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    var NodeList = langx.klass({\r\n        klassName: \"SkNodeList\",\r\n        init: function(selector, context) {\r\n            var self = this,\r\n                match, nodes, node, props;\r\n\r\n            if (selector) {\r\n                self.context = context = context || noder.doc();\r\n\r\n                if (isString(selector)) {\r\n                    // a html string or a css selector is expected\r\n                    self.selector = selector;\r\n\r\n                    if (selector.charAt(0) === \"<\" && selector.charAt(selector.length - 1) === \">\" && selector.length >= 3) {\r\n                        match = [null, selector, null];\r\n                    } else {\r\n                        match = rquickExpr.exec(selector);\r\n                    }\r\n\r\n                    if (match) {\r\n                        if (match[1]) {\r\n                            // if selector is html\r\n                            nodes = noder.createFragment(selector);\r\n\r\n                            if (langx.isPlainObject(context)) {\r\n                                props = context;\r\n                            }\r\n\r\n                        } else {\r\n                            node = finder.byId(match[2], noder.ownerDoc(context));\r\n\r\n                            if (node) {\r\n                                // if selector is id\r\n                                nodes = [node];\r\n                            }\r\n\r\n                        }\r\n                    } else {\r\n                        // if selector is css selector\r\n                        if (langx.isString(context)) {\r\n                            context = finder.find(context);\r\n                        }\r\n\r\n                        nodes = finder.descendants(context, selector);\r\n                    }\r\n                } else {\r\n                    if (selector !== window && isArrayLike(selector)) {\r\n                        // a dom node array is expected\r\n                        nodes = selector;\r\n                    } else {\r\n                        // a dom node is expected\r\n                        nodes = [selector];\r\n                    }\r\n                    //self.add(selector, false);\r\n                }\r\n            }\r\n\r\n\r\n            if (nodes) {\r\n\r\n                push.apply(self, nodes);\r\n\r\n                if (props) {\r\n                    for ( var name  in props ) {\r\n                        // Properties of context are called as methods if possible\r\n                        if ( langx.isFunction( this[ name ] ) ) {\r\n                            this[ name ]( props[ name ] );\r\n                        } else {\r\n                            this.attr( name, props[ name ] );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return self;\r\n        }\r\n    });\r\n\r\n    var query = (function() {\r\n        isQ = function(object) {\r\n            return object instanceof NodeList;\r\n        }\r\n        init = function(selector, context) {\r\n            return new NodeList(selector, context);\r\n        }\r\n\r\n        var $ = function(selector, context) {\r\n            if (isFunction(selector)) {\r\n                $.ready(function() {\r\n                    selector($);\r\n                });\r\n            } else if (isQ(selector)) {\r\n                return selector;\r\n            } else {\r\n                if (context && isQ(context) && isString(selector)) {\r\n                    return context.find(selector);\r\n                }\r\n                return init(selector, context);\r\n            }\r\n        };\r\n\r\n        $.fn = NodeList.prototype;\r\n        langx.mixin($.fn, {\r\n            // `map` and `slice` in the jQuery API work differently\r\n            // from their array counterparts\r\n            length : 0,\r\n\r\n            map: function(fn) {\r\n                return $(uniq(langx.map(this, function(el, i) {\r\n                    return fn.call(el, i, el)\r\n                })));\r\n            },\r\n\r\n            slice: function() {\r\n                return $(slice.apply(this, arguments))\r\n            },\r\n\r\n            forEach: function() {\r\n                return forEach.apply(this,arguments);\r\n            },\r\n\r\n            get: function(idx) {\r\n                return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]\r\n            },\r\n\r\n            indexOf: function() {\r\n                return indexOf.apply(this,arguments);\r\n            },\r\n\r\n            sort : function() {\r\n                return sort.apply(this,arguments);\r\n            },\r\n\r\n            toArray: function() {\r\n                return slice.call(this);\r\n            },\r\n\r\n            size: function() {\r\n                return this.length\r\n            },\r\n\r\n            //remove: wrapper_every_act(noder.remove, noder),\r\n            remove : function(selector) {\r\n                if (selector) {\r\n                    return this.find(selector).remove();\r\n                }\r\n                this.each(function(i,node){\r\n                    noder.remove(node);\r\n                });\r\n                return this;\r\n            },\r\n\r\n            each: function(callback) {\r\n                langx.each(this, callback);\r\n                return this;\r\n            },\r\n\r\n            filter: function(selector) {\r\n                if (isFunction(selector)) return this.not(this.not(selector))\r\n                return $(filter.call(this, function(element) {\r\n                    return finder.matches(element, selector)\r\n                }))\r\n            },\r\n\r\n            add: function(selector, context) {\r\n                return $(uniq(this.toArray().concat($(selector, context).toArray())));\r\n            },\r\n\r\n            is: function(selector) {\r\n                if (this.length > 0) {\r\n                    var self = this;\r\n                    if (langx.isString(selector)) {\r\n                        return some.call(self,function(elem) {\r\n                            return finder.matches(elem, selector);\r\n                        });\r\n                    } else if (langx.isArrayLike(selector)) {\r\n                       return some.call(self,function(elem) {\r\n                            return langx.inArray(elem, selector) > -1;\r\n                        });\r\n                    } else if (langx.isHtmlNode(selector)) {\r\n                       return some.call(self,function(elem) {\r\n                            return elem ==  selector;\r\n                        });\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            \r\n            not: function(selector) {\r\n                var nodes = []\r\n                if (isFunction(selector) && selector.call !== undefined)\r\n                    this.each(function(idx,node) {\r\n                        if (!selector.call(this, idx,node)) nodes.push(this)\r\n                    })\r\n                else {\r\n                    var excludes = typeof selector == 'string' ? this.filter(selector) :\r\n                        (isArrayLike(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)\r\n                    this.forEach(function(el) {\r\n                        if (excludes.indexOf(el) < 0) nodes.push(el)\r\n                    })\r\n                }\r\n                return $(nodes)\r\n            },\r\n\r\n            has: function(selector) {\r\n                return this.filter(function() {\r\n                    return isObject(selector) ?\r\n                        noder.contains(this, selector) :\r\n                        $(this).find(selector).size()\r\n                })\r\n            },\r\n\r\n            eq: function(idx) {\r\n                return idx === -1 ? this.slice(idx) : this.slice(idx, +idx + 1);\r\n            },\r\n\r\n            first: function() {\r\n                return this.eq(0);\r\n            },\r\n\r\n            last: function() {\r\n                return this.eq(-1);\r\n            },\r\n\r\n            find: wrapper_selector(finder.descendants, finder),\r\n\r\n            closest: wrapper_selector(finder.closest, finder),\r\n            /*\r\n                        closest: function(selector, context) {\r\n                            var node = this[0],\r\n                                collection = false\r\n                            if (typeof selector == 'object') collection = $(selector)\r\n                            while (node && !(collection ? collection.indexOf(node) >= 0 : finder.matches(node, selector)))\r\n                                node = node !== context && !isDocument(node) && node.parentNode\r\n                            return $(node)\r\n                        },\r\n            */\r\n\r\n\r\n            parents: wrapper_selector(finder.ancestors, finder),\r\n\r\n            parentsUntil: wrapper_selector_until(finder.ancestors, finder),\r\n\r\n\r\n            parent: wrapper_selector(finder.parent, finder),\r\n\r\n            children: wrapper_selector(finder.children, finder),\r\n\r\n            contents: wrapper_map(noder.contents, noder),\r\n\r\n            empty: wrapper_every_act(noder.empty, noder),\r\n\r\n            // `pluck` is borrowed from Prototype.js\r\n            pluck: function(property) {\r\n                return langx.map(this, function(el) {\r\n                    return el[property]\r\n                })\r\n            },\r\n\r\n            pushStack : function(elms) {\r\n                var ret = $(elms);\r\n                ret.prevObject = this;\r\n                return ret;\r\n            },\r\n            \r\n            replaceWith: function(newContent) {\r\n                return this.before(newContent).remove();\r\n            },\r\n\r\n            wrap: function(structure) {\r\n                var func = isFunction(structure)\r\n                if (this[0] && !func)\r\n                    var dom = $(structure).get(0),\r\n                        clone = dom.parentNode || this.length > 1\r\n\r\n                return this.each(function(index,node) {\r\n                    $(this).wrapAll(\r\n                        func ? structure.call(this, index,node) :\r\n                        clone ? dom.cloneNode(true) : dom\r\n                    )\r\n                })\r\n            },\r\n\r\n            wrapAll: function(wrappingElement) {\r\n                if (this[0]) {\r\n                    $(this[0]).before(wrappingElement = $(wrappingElement));\r\n                    var children;\r\n                    // drill down to the inmost element\r\n                    while ((children = wrappingElement.children()).length) {\r\n                        wrappingElement = children.first();\r\n                    }\r\n                    $(wrappingElement).append(this);\r\n                }\r\n                return this\r\n            },\r\n\r\n            wrapInner: function(wrappingElement) {\r\n                var func = isFunction(wrappingElement)\r\n                return this.each(function(index,node) {\r\n                    var self = $(this),\r\n                        contents = self.contents(),\r\n                        dom = func ? wrappingElement.call(this, index,node) : wrappingElement\r\n                    contents.length ? contents.wrapAll(dom) : self.append(dom)\r\n                })\r\n            },\r\n\r\n            unwrap: function(selector) {\r\n                if (this.parent().children().length === 0) {\r\n                    // remove dom without text\r\n                    this.parent(selector).not(\"body\").each(function() {\r\n                        $(this).replaceWith(document.createTextNode(this.childNodes[0].textContent));\r\n                    });\r\n                } else {\r\n                    this.parent().each(function() {\r\n                        $(this).replaceWith($(this).children())\r\n                    });\r\n                }\r\n                return this\r\n            },\r\n\r\n            clone: function() {\r\n                return this.map(function() {\r\n                    return this.cloneNode(true)\r\n                })\r\n            },\r\n\r\n\r\n            toggle: function(setting) {\r\n                return this.each(function() {\r\n                    var el = $(this);\r\n                    (setting === undefined ? el.css(\"display\") == \"none\" : setting) ? el.show(): el.hide()\r\n                })\r\n            },\r\n\r\n            prev: function(selector) {\r\n                return $(this.pluck('previousElementSibling')).filter(selector || '*')\r\n            },\r\n\r\n            prevAll: wrapper_selector(finder.previousSiblings, finder),\r\n\r\n            next: function(selector) {\r\n                return $(this.pluck('nextElementSibling')).filter(selector || '*')\r\n            },\r\n\r\n            nextAll: wrapper_selector(finder.nextSiblings, finder),\r\n\r\n            siblings: wrapper_selector(finder.siblings, finder),\r\n\r\n            index: function(elem) {\r\n                if (elem) {\r\n                    return this.indexOf($(elem)[0]);\r\n                } else {\r\n                    return this.parent().children().indexOf(this[0]);\r\n                }\r\n            }\r\n        });\r\n\r\n        // for now\r\n        $.fn.detach = $.fn.remove;\r\n\r\n        $.fn.hover = function(fnOver, fnOut) {\r\n            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\r\n        };\r\n\r\n\r\n        var traverseNode = noder.traverse;\r\n\r\n        function wrapper_node_operation(func, context, oldValueFunc) {\r\n            return function(html) {\r\n                var argType, nodes = langx.map(arguments, function(arg) {\r\n                    argType = type(arg)\r\n                    return argType == \"function\" || argType == \"object\" || argType == \"array\" || arg == null ?\r\n                        arg : noder.createFragment(arg)\r\n                });\r\n                if (nodes.length < 1) {\r\n                    return this\r\n                }\r\n                this.each(function(idx) {\r\n                    func.apply(context, [this, nodes, idx > 0]);\r\n                });\r\n                return this;\r\n            }\r\n        }\r\n\r\n\r\n        $.fn.after = wrapper_node_operation(noder.after, noder);\r\n\r\n        $.fn.prepend = wrapper_node_operation(noder.prepend, noder);\r\n\r\n        $.fn.before = wrapper_node_operation(noder.before, noder);\r\n\r\n        $.fn.append = wrapper_node_operation(noder.append, noder);\r\n\r\n\r\n        langx.each( {\r\n            appendTo: \"append\",\r\n            prependTo: \"prepend\",\r\n            insertBefore: \"before\",\r\n            insertAfter: \"after\",\r\n            replaceAll: \"replaceWith\"\r\n        }, function( name, original ) {\r\n            $.fn[ name ] = function( selector ) {\r\n                var elems,\r\n                    ret = [],\r\n                    insert = $( selector ),\r\n                    last = insert.length - 1,\r\n                    i = 0;\r\n\r\n                for ( ; i <= last; i++ ) {\r\n                    elems = i === last ? this : this.clone( true );\r\n                    $( insert[ i ] )[ original ]( elems );\r\n\r\n                    // Support: Android <=4.0 only, PhantomJS 1 only\r\n                    // .get() because push.apply(_, arraylike) throws on ancient WebKit\r\n                    push.apply( ret, elems.get() );\r\n                }\r\n\r\n                return this.pushStack( ret );\r\n            };\r\n        } );\r\n\r\n/*\r\n        $.fn.insertAfter = function(html) {\r\n            $(html).after(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.insertBefore = function(html) {\r\n            $(html).before(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.appendTo = function(html) {\r\n            $(html).append(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.prependTo = function(html) {\r\n            $(html).prepend(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.replaceAll = function(selector) {\r\n            $(selector).replaceWith(this);\r\n            return this;\r\n        };\r\n*/\r\n        return $;\r\n    })();\r\n\r\n    (function($) {\r\n        $.fn.scrollParent = function( includeHidden ) {\r\n            var position = this.css( \"position\" ),\r\n                excludeStaticParent = position === \"absolute\",\r\n                overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\r\n                scrollParent = this.parents().filter( function() {\r\n                    var parent = $( this );\r\n                    if ( excludeStaticParent && parent.css( \"position\" ) === \"static\" ) {\r\n                        return false;\r\n                    }\r\n                    return overflowRegex.test( parent.css( \"overflow\" ) + parent.css( \"overflow-y\" ) +\r\n                        parent.css( \"overflow-x\" ) );\r\n                } ).eq( 0 );\r\n\r\n            return position === \"fixed\" || !scrollParent.length ?\r\n                $( this[ 0 ].ownerDocument || document ) :\r\n                scrollParent;\r\n        };\r\n\r\n    })(query);\r\n\r\n\r\n    (function($) {\r\n        $.fn.end = function() {\r\n            return this.prevObject || $()\r\n        }\r\n\r\n        $.fn.andSelf = function() {\r\n            return this.add(this.prevObject || $())\r\n        }\r\n\r\n        $.fn.addBack = function(selector) {\r\n            if (this.prevObject) {\r\n                if (selector) {\r\n                    return this.add(this.prevObject.filter(selector));\r\n                } else {\r\n                    return this.add(this.prevObject);\r\n                }\r\n            } else {\r\n                return this;\r\n            }\r\n        }\r\n\r\n        'filter,add,not,eq,first,last,find,closest,parents,parent,children,siblings,prev,prevAll,next,nextAll'.split(',').forEach(function(property) {\r\n            var fn = $.fn[property]\r\n            $.fn[property] = function() {\r\n                var ret = fn.apply(this, arguments)\r\n                ret.prevObject = this\r\n                return ret\r\n            }\r\n        })\r\n    })(query);\r\n\r\n\r\n    (function($) {\r\n        $.fn.query = $.fn.find;\r\n\r\n        $.fn.place = function(refNode, position) {\r\n            // summary:\r\n            //      places elements of this node list relative to the first element matched\r\n            //      by queryOrNode. Returns the original NodeList. See: `dojo/dom-construct.place`\r\n            // queryOrNode:\r\n            //      may be a string representing any valid CSS3 selector or a DOM node.\r\n            //      In the selector case, only the first matching element will be used\r\n            //      for relative positioning.\r\n            // position:\r\n            //      can be one of:\r\n            //\r\n            //      -   \"last\" (default)\r\n            //      -   \"first\"\r\n            //      -   \"before\"\r\n            //      -   \"after\"\r\n            //      -   \"only\"\r\n            //      -   \"replace\"\r\n            //\r\n            //      or an offset in the childNodes\r\n            if (langx.isString(refNode)) {\r\n                refNode = finder.descendant(refNode);\r\n            } else if (isQ(refNode)) {\r\n                refNode = refNode[0];\r\n            }\r\n            return this.each(function(i, node) {\r\n                switch (position) {\r\n                    case \"before\":\r\n                        noder.before(refNode, node);\r\n                        break;\r\n                    case \"after\":\r\n                        noder.after(refNode, node);\r\n                        break;\r\n                    case \"replace\":\r\n                        noder.replace(refNode, node);\r\n                        break;\r\n                    case \"only\":\r\n                        noder.empty(refNode);\r\n                        noder.append(refNode, node);\r\n                        break;\r\n                    case \"first\":\r\n                        noder.prepend(refNode, node);\r\n                        break;\r\n                        // else fallthrough...\r\n                    default: // aka: last\r\n                        noder.append(refNode, node);\r\n                }\r\n            });\r\n        };\r\n\r\n        $.fn.addContent = function(content, position) {\r\n            if (content.template) {\r\n                content = langx.substitute(content.template, content);\r\n            }\r\n            return this.append(content);\r\n        };\r\n\r\n\r\n\r\n        $.fn.disableSelection = ( function() {\r\n            var eventType = \"onselectstart\" in document.createElement( \"div\" ) ?\r\n                \"selectstart\" :\r\n                \"mousedown\";\r\n\r\n            return function() {\r\n                return this.on( eventType + \".ui-disableSelection\", function( event ) {\r\n                    event.preventDefault();\r\n                } );\r\n            };\r\n        } )();\r\n\r\n        $.fn.enableSelection = function() {\r\n            return this.off( \".ui-disableSelection\" );\r\n        };\r\n\r\n        $.fn.reflow = function() {\r\n            return noder.flow(this[0]);\r\n        };\r\n\r\n        $.fn.isBlockNode = function() {\r\n            return noder.isBlockNode(this[0]);\r\n        };\r\n       \r\n\r\n    })(query);\r\n\r\n    query.fn.plugin = function(name,options) {\r\n        var args = slice.call( arguments, 1 ),\r\n            self = this,\r\n            returnValue = this;\r\n\r\n        this.each(function(){\r\n            returnValue = plugins.instantiate.apply(self,[this,name].concat(args));\r\n        });\r\n        return returnValue;\r\n    };\r\n\r\n\r\n    query.wraps = {\r\n        wrapper_node_operation,\r\n        wrapper_map,\r\n        wrapper_value,\r\n        wrapper_selector,\r\n        wrapper_some_chk,\r\n        wrapper_selector_until,\r\n        wrapper_every_act_firstArgFunc,\r\n        wrapper_every_act,\r\n        wrapper_name_value\r\n\r\n    };\r\n\r\n    return skylark.attach(\"domx.query\", query);\r\n\r\n});\ndefine('skylark-domx-query/main',[\r\n\t\"./query\"\r\n],function(query){\r\n\treturn query;\r\n});\ndefine('skylark-domx-query', ['skylark-domx-query/main'], function (main) { return main; });\n\n"]}